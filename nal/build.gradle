
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
//        maven { url 'http://jitpack.io' }
//        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

    }
//    configurations.maybeCreate("pitest")
//    dependencies {
//        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
//        pitest 'org.pitest:pitest-junit5-plugin:0.6-SNAPSHOT'
//    dependencies {
//        classpath "gradle.plugin.io.morethan.jmhreport:gradle-jmh-report:0.9.0"
//    }
}

apply plugin: "me.champeau.gradle.jmh"
//apply plugin: "io.morethan.jmhreport"

//apply plugin: "info.solidsoft.pitest"

//compileJava {
//    options.compilerArgs = ['-verbose']
//}

//plugins {
////https://github.com/melix/jmh-gradle-plugin
//    id "me.champeau.gradle.jmh" version "0.4.5"
//}

//apply plugin: 'org.jetbrains.grammarkit'
//grammarKit {
////    jflexRelease = jflex_version
////    grammarKitRelease = grammarkit_version
//}
//
//import org.jetbrains.grammarkit.tasks.GenerateLexer
//import org.jetbrains.grammarkit.tasks.GenerateParser
//
//task generateNarseseParser(type: GenerateParser) {
//    // source bnf file
//    source = "src/main/java/nars/narsese.bnf"
//
//    // optional, task-specific root for the generated files. Default: none
//    targetRoot = 'src/main/java/nars/io/narsese'
//
//    // path to a parser file, relative to the targetRoot
//    pathToParser = 'NarseseParser.java'
//
//    // path to a directory with generated psi files, relative to the targetRoot
//    pathToPsiRoot = 'psi'
//
//    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
//    purgeOldFiles = true
//}

dependencies {
    compile project(':util')

    compile(group: 'com.github.fge', name: 'grappa', version: '2.1.0-beta.3') {
        exclude(module: 'guava')
        exclude(module: 'asm-debug-all')
    }
    compile group: 'net.byteseek', name: 'byteseek', version: '2.0.3'

//    compile group: 'net.openhft', name: 'chronicle-bytes', version: '1.10.4'


    testCompile(group: 'org.pitest', name: 'pitest', version: '1.4.6')
    testCompile(group: 'org.pitest', name: 'pitest-entry', version: '1.4.6')
    testCompile(group: 'org.pitest', name: 'pitest-junit5-plugin', version: '0.8') {
        exclude(module: 'testng')
        exclude(module: 'junit')
    }

    // https://mvnrepository.com/artifact/eu.stamp-project/dspot
//    testCompile(group: 'eu.stamp-project', name: 'dspot', version: '1.1.0')



    for (x in ['jmh-core','jmh-generator-annprocess']) {
        jmh(group: 'org.openjdk.jmh', name: x, version: '1.21')
    }




//    testCompile(group: 'fr.inria.stamp', name:'dspot', version:'1.0.2-SNAPSHOT')
}


//tasks.jmh.finalizedBy tasks.jmhReport
//
//jmhReport {
//    jmhResultPath = project.file('build/reports/jmh/result.json')
//    jmhReportOutput = project.file('build/reports/jmh')
//}

//apply plugin: 'com.uber.infer.java'
//apply plugin: 'com.github.johnrengelman.shadow'

//tasks.withType(JavaCompile) {
//    // http://errorprone.info/bugpatterns
//    options.compilerArgs += [
//            '-XepAllErrorsAsWarnings',
//            '-Xep:DeadException:WARN',
//            '-Xep:DeadThread:WARN',
//            '-Xep:IsInstanceOfClass:WARN',
//            '-Xep:NullTernary:WARN',
//            '-Xep:RandomModInteger:WARN',
//            '-Xep:TryFailThrowable:WARN',
//            '-Xep:UnnecessaryTypeArgument:WARN',
//            '-Xep:UnusedAnonymousClass:WARN',
//            '-Xep:ReturnValueIgnored:WARN',
//            '-Xep:IdentityBinaryExpression:OFF',
//            '-Xep:DefaultCharset:OFF',
//            '-Xep:ReferenceEquality:OFF',
//            '-XepOpt:NullAway:AnnotatedPackages=nars'
//    ]
//}

//pitest {
////    configurations { mutableCodeBase { transitive false } }
////    dependencies { mutableCodeBase project(':util') }
////    pitest {
////        mainSourceSets = [project.sourceSets.main, project(':util').sourceSets.main]
////        additionalMutableCodePaths = [configurations.mutableCodeBase.singleFile]
////    }
//    setJvmPath('/home/me/jdk11img')
//    targetTests = [
//            //'nars.nal.nal1.NAL1Test',
//            //'nars.nal.nal1.NAL1MultistepTest',
//            //'nars.nal.nal2.*',
//            //'nars.derive.TemporalizeTest',
//            'nars.task.*'
//    ]
//    targetClasses = [
//            'nars.term.*',
//            'nars.nal.*',
//            //'nars.table.*',
//            //'nars.concept.*',
//            //'nars.control.*',
//            'nars.derive.time.*'
//    ]
//
//
//    //jvmArgs = ["-ea"]
//
//    verbose = true
//    pitestVersion = '1.4.1-SNAPSHOT'
//    testPlugin = "junit5"
//    timeoutFactor = 3
//    enableDefaultIncrementalAnalysis = true
//    threads = 4
//
//    outputFormats = ['HTML']
//    timestampedReports = false
//}



//task printClasspath4DSpot {
//    doLast {
//        configurations.testRuntime.each { println it }
//    }
//}

//task printClasspath4DSpot {
//    doLast {
//        configurations.testRuntime.each { println it }
//    }
//}