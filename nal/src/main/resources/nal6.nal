

// Conditional syllogism && Independent Variable Elimination
//      If after M, P usually happens, and M happens, it means P is expected to happen


     B, (  X ==> C), --is(X,"--"), --is(C,"#"), --is(B,"==>") |- unisubst(C,X,B,"$"), (Belief:Pre, Goal:Pre)
     //(  X ==> C), B, --is(X,"--"), --is(C,"#"), --is(B,"==>") |- unisubst(C,X,B,"$"), (Belief:PreX)

        //--is(X,"#"),
//         B, (X ==> (&&,  C,A..+))       |- unisubst(  (&&,X,A..+),C,B), (Belief:Pre)
//         B, (X ==> (&&,--C,A..+))       |- unisubst(  (&&,X,A..+),C,B), (Belief:PreN)

        //antigoal:
        //B, (A ==> C), --is(A,"--"),--is(A,"#"),--is(C,"#"), --is(B,"==>") |- --unisubst(C,A,B), (Goal:PreWeakN, Time:TaskPlusBeliefDT)

       //questions
          B, (A ==> C), task("?@"), --is(A,{"--","#"}), --is(C,"#"), --is(B,"==>") |- unisubst((A ==> C),A,B,"$",novel), (Punctuation:Question)
          B, (A ==> C), task("?@"), --is(A,{"--","#"}), --is(C,"#"), --is(B,"==>") |- unisubst(C,A,B,"$")


       //conjunction goal induction from impl (shortcut)
//        G, (A==>B), eventOf(B,G)    |- (A &&   conjWithout(B,G)), (Belief:PrePP, Goal:PreWeakPP)
//        G, (A==>B), eventOf(B,G)    |- (A && --conjWithout(B,G)), (Belief:PrePN, Goal:PreWeakPN)
//        G, (A==>B), eventOfNeg(B,G) |- (A &&   conjWithout(B,--G)), (Belief:PreNP, Goal:PreWeakNP)
//        G, (A==>B), eventOfNeg(B,G) |- (A && --conjWithout(B,--G)), (Belief:PreNN, Goal:PreWeakNN)

     B, (--X ==> C), --is(C,"#"), --is(B,"==>") |- unisubst(C,X,B,"$"), (Belief:PreN, Goal:PreN)
     //(--X ==> C), B, --is(C,"#"), --is(B,"==>") |- unisubst(C,X,B,"$"), (Belief:PreNX)



            //,--is(X,"--")

        //antigoal:
        //B, (--A ==> C), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- --unisubst(C,A,B), (Goal:PreWeak, Time:TaskPlusBeliefDT)

        //questions
          B, (--A ==> C), task("?@"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- unisubst((--A ==> C),A,B,"$",novel), (Punctuation:Question)
          B, (--A ==> C), task("?@"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- unisubst(C,A,B,"$")

    B, (C ==> A), --is(C,"#"), --is(B,"==>") |- unisubst(C,A,B,"$"), (Belief:PostWeak, Goal:PostWeak)

        //antigoal:
        //B, (C ==> A), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- --unisubst(C,A,B), (Goal:PostStrongPN, Time:TaskMinusBeliefDT)

        //questions
          B, (C ==> A), task("?@"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- unisubst((C ==> A),A,B,"$",novel), (Punctuation:Question)
          B, (C ==> A), task("?@"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- unisubst(C,A,B,"$")





//            //--is(A,"#"),
//       B, (  (&&,  C,A..+) ==> X)       |-   unisubst((&&,X,A..+),C,B), (Belief:Abduction)
//       B, (  (&&,--C,A..+) ==> X)       |-   unisubst((&&,X,A..+),C,B), (Belief:AbductionN)
//       B, (--(&&,  C,A..+) ==> X)       |- --unisubst((&&,X,A..+),C,B), (Belief:Abduction)
//       B, (--(&&,--C,A..+) ==> X)       |- --unisubst((&&,X,A..+),C,B), (Belief:AbductionN)



//conj/impl question decomposition
//    (A ==> B), B, task("?")             |- A, (Punctuation:Question)
//    (C ==> B), A, task("?"), eqPN(A,C)  |- B, (Punctuation:Question)

        //TODO more question variations
//        Y, (  C ==> Z), is(C,"&&"),eventOf(C,Y)    |- (  conjWithout(C,  Y) ==> Z), (Belief:Pre)
//        Y, (--C ==> Z), is(C,"&&"),eventOf(C,Y)    |- (--conjWithout(C,  Y) ==> Z), (Belief:Pre)
//        Y, (  C ==> Z), is(C,"&&"),eventOfNeg(C,Y)    |- (  conjWithout(C,--Y) ==> Z), (Belief:PreN)
//        Y, (--C ==> Z), is(C,"&&"),eventOfNeg(C,Y)    |- (--conjWithout(C,--Y) ==> Z), (Belief:PreN)
                //TODO eventsOf
        Y, ((&&,X,A..+) ==> Z),  --isVar(X)      |- unisubst(((&&,A..+) ==> Z), X,Y), (Belief:Pre)
        Y, ((&&,--X,A..+) ==> Z), --isVar(X)     |- unisubst(((&&,A..+) ==> Z), X,Y), (Belief:PreN)
          Y, (--(&&,X,A..+) ==> Z), --isVar(X)   |- unisubst((--(&&,A..+) ==> Z), X,Y), (Belief:Pre)
          Y, (--(&&,--X,A..+) ==> Z), --isVar(X) |- unisubst((--(&&,A..+) ==> Z), X,Y), (Belief:PreN)
        //Y, (  C ==> Z), isUnneg(C,"&&") |- unisubst((C ==> Z), chooseUnifiableSubEvent(C,Y),Y,novel), (Belief:Pre)
        //Y, (  C ==> Z), isUnneg(C,"&&") |- unisubst((C ==> Z), chooseUnifiableSubEvent(C,--Y),--Y,novel), (Belief:PreN)
          //Y, ((&&,X,A..+) ==> Z), neq(X,Y) |- unisubst(((&&,X,A..+) ==> Z), X,Y,novel), (Belief:Deduction)
           //Y, ((&&,X,A..+) ==> Z) |- unisubst(((&&,X,Y,A..+) ==> Z), X,Y), (Belief:Deduction)

          //Y, ((&&,--X,A..+) ==> Z), neq(X,Y) |- unisubst(((&&,--X,A..+) ==> Z), X,Y,novel), (Belief:DeductionN)
           //Y, ((&&,--X,A..+) ==> Z) |- unisubst(((&&,--X,--Y,A..+) ==> Z), X,Y), (Belief:DeductionN)
                //Y, (--(&&,X,A..+) ==> Z), neq(X,Y) |- unisubst((--(&&,X,A..+) ==> Z), X,Y,novel), (Belief:Deduction)
                 //Y, (--(&&,X,A..+) ==> Z) |- unisubst((--(&&,X,Y,A..+) ==> Z), X,Y), (Belief:Deduction)
                //Y, (--(&&,--X,A..+) ==> Z), neq(X,Y) |- unisubst((--(&&,--X,A..+) ==> Z), X,Y,novel), (Belief:DeductionN)
                 //Y, (--(&&,--X,A..+) ==> Z) |- unisubst((--(&&,--X,--Y,A..+) ==> Z), X,Y), (Belief:DeductionN)

            //    Y, (B ==> (&&,X,A..+)) |- unisubst((B ==> (&&,A..+)),X,Y), (Belief:Deduction)
            //    Y, (B ==> (&&,--X,A..+)) |- unisubst((B ==> (&&,A..+)),X,Y), (Belief:DeductionN)

        Y, (Z ==> C), is(C,"&&"),eventOf(C,Y)                 |- (Z ==> conjWithout(C,    Y)), (Belief:Abduction)
        Y, (Z ==> C), is(C,"&&"),eventOfNeg(C,Y)              |- (Z ==> conjWithout(C,  --Y)), (Belief:AbductionN)
        Y, (Z ==> C), is(C,"&&")                              |- unisubst((Z ==> C),chooseUnifiableSubEvent(C,Y),Y,novel), (Belief:Abduction)
        Y, (Z ==> C), is(C,"&&"),has(C,"--")                  |- unisubst((Z ==> C),chooseUnifiableSubEvent(C,--Y),--Y,novel), (Belief:AbductionN)
          //Y, (Z ==> (&&,X,A..+)), neq(X,Y),neq(Y,Z) |- unisubst((Z ==> (&&,X,A..+)), X,Y,novel), (Belief:Abduction)
            //Y, (Z ==> (&&,X,A..+)) |- unisubst((Z ==> (&&,X,Y,A..+)), X,Y), (Belief:Abduction)
          //Y, (Z ==> (&&,--X,A..+)), neq(X,Y),neq(Y,Z) |- unisubst((Z ==> (&&,--X,A..+)), X,Y,novel), (Belief:AbductionN)
            //Y, (Z ==> (&&,--X,A..+)) |- unisubst((Z ==> (&&,--X,--Y,A..+)), X,Y), (Belief:AbductionN)




//// implication-based syllogism ////////////////////////////////////////////////////////////////////////////////////
//       (A ==> B) ------- (B ==> C)
//            \               /
//             \             /
//              \           /
//               \         /
//                (A ==> C)

    //"Please note that the temporal order in the conclusion of a weak rule is
    //not necessarily the same as the order in the premises, given the hypothetical
    //nature of such a rule."

    //If after S M happens, and after M then P happens, so S then P happens
    (S ==> M),   (M ==> P)    |-   (S ==> P),   (Belief:DeductionPP)
      (M ==> P), (S ==> M)    |-   (S ==> P),     (Belief:DeductionPP)
    (S ==> M),   (M ==> P)    |-   (S ==> --P), (Belief:DeductionPN)
      (M ==> P), (S ==> M)    |-   (S ==> --P),   (Belief:DeductionNP)
    (S ==> M), (--M ==> P)    |-   (S ==> P),   (Belief:DeductionNP)
      (--M ==> P), (S ==> M)  |-   (S ==> P),     (Belief:DeductionPN)
    (S ==> M), (--M ==> P)    |-   (S ==> --P), (Belief:DeductionNN)
      (--M ==> P), (S ==> M)  |-   (S ==> --P),   (Belief:DeductionNN)


        //(S ==> M), (M ==> P), task("?") |- ((S ==> P) || (P ==> S)), (Punctuation:Question)
            //(S ==> X), (Y ==> P), eqPN(X,Y), task("?") |- (S ==> P), (Punctuation:Question)
            //(S ==> M), (M ==> P), task("?") |- (S ==> P), (Punctuation:Question)
            //(S ==> M), (M ==> P), task("?") |- (P ==> S), (Punctuation:Question)

            //(S ==> M), (--M ==> P), task("?") |- ((S ==> P) || (P ==> S)), (Punctuation:Question)
                //(S ==> M), (--M ==> P), task("?") |- (S ==> P), (Punctuation:Question)
                //(S ==> M), (--M ==> P), task("?") |- (P ==> S), (Punctuation:Question)

//        //deduction with unification
//        (S ==> M), (N ==> P), neq(M,N) |- unisubst((S ==> P), M, N), (Belief:Deduction)
//            (S ==> M), (--N ==> P), neq(M,N) |- unisubst((S ==> P), M, N), (Belief:DeductionN)


    //TODO reversals for Abduction, Induction, Exemplification

    (M ==> S), (M ==> P) |- (S ==> P), (Belief:Abduction)
        (M ==> S), (M ==> P) |- (--S ==> --P), (Belief:AbductionNN)
    (M ==> P), (M ==> S) |- (S ==> P), (Belief:Induction)
        (M ==> P), (M ==> S) |- (--S ==> --P), (Belief:InductionNN)

                //(X ==> S), (Y ==> P), eqPN(X,Y), task("?") |- (polarizeRandom(S) ==> P), (Punctuation:Question)

    (S ==> M), (P ==> M) |- (S ==> P), (Belief:InductionPB)
    (P ==> M), (S ==> M) |- (S ==> P), (Belief:AbductionPB)

            //(S ==> X), (P ==> X), task("?") |- (S ==> P), (Punctuation:Question)

    (  M ==> S), (P ==> M)       |- (  S ==> P), (Belief:Exemplification)
    (  M ==> S), (P ==> M)       |- (--S ==> P), (Belief:ExemplificationN)
    (--M ==> S), (P ==> M)       |- (  S ==> P), (Belief:ExemplificationPN)
    (--M ==> S), (P ==> M)       |- (--S ==> P), (Belief:ExemplificationNN)

            //(X ==> S), (P ==> Y), task("?"), eqPN(X,Y) |- (polarizeRandom(S) ==> P), (Punctuation:Question)

    //the comparison rules here emulates what Comparison did in generating <=> which are modeled here as a pair of opposing ==>
    //untested
//    (P ==> M), (S ==> M) |- --((S ==> P) && (P ==> S)), (Belief:ComparisonSymmetric)
//    (M ==> P), (M ==> S) |- --((S ==> P) && (P ==> S)), (Belief:ComparisonSymmetric)
////    (P ==> M), (S ==> M) |- (S ==> P), (Belief:Comparison)
////        (P ==> M), (S ==> M) |- (P ==> S), (Belief:Comparison)
////    (M ==> P), (M ==> S) |- (S ==> P), (Belief:Comparison)
////        (M ==> P), (M ==> S) |- (P ==> S), (Belief:Comparison)










//// implication-based composition ////////////////////////////////////////////////////////////////////////////////////
//note: the question variations of these are responsible for creating terms that can be truthed dynamically. so they are important
//Same as for inheritance
//classically: union/intersection assymmetry: union if subj, intersect if pred
//TODO: ...Also:VarIntro)

    //TODO DynamicImplTruth
     (P ==> M), (S ==> M)  |- ((P && S) ==> M), (Belief:IntersectionPB, Time:Compose)
       (P ==> M), (S ==> M)  |- ((P || S) ==> M), (Belief:UnionPB, Time:Compose)

        (P ==> M), (S ==> M), task("?")  |- ((P && S) ==> M), (Punctuation:Question, Time:Compose)
          (P ==> M), (S ==> M), task("?")  |- ((P || S) ==> M), (Punctuation:Question, Time:Compose)
            //(P ==> M), (S ==> M), task("?")  |- (P || S), (Punctuation:Question)
            //(P ==> M), (S ==> M), task("?")  |- (P && S), (Punctuation:Question)


    //TODO DynamicImplTruth
     (M ==> P), (M ==> S)  |- (M ==> (polarizeTask(P) && polarizeBelief(S))), (Belief:IntersectionDepolarized, Time:Compose)
       (M ==> P), (M ==> S)  |- (M ==> (polarizeTask(P) || polarizeBelief(S))), (Belief:UnionDepolarized, Time:Compose)

        (M ==> P), (M ==> S), task("?"), hasBelief() |- (M ==> (polarizeRandom(P) && polarizeBelief(S))), (Punctuation:Question, Time:Compose)
            //(M ==> P), (M ==> S), task("?") |- (polarizeRandom(P) && polarizeRandom(S)), (Punctuation:Question)

        //TODO question variations
        //((&&,P,A..+) ==> X), ((&&,S,A..+) ==> X), neq(P,S) |- ((&&,(P && S),A..+) ==> X), (Belief:IntersectionSym)
        //((&&,P,A..+) ==> X), ((&&,S,A..+) ==> X), neq(P,S) |- ((&&,(P || S),A..+) ==> X), (Belief:UnionSym)

        //TODO question variations
        //(--(&&,P,A..+) ==> X), (--(&&,S,A..+) ==> X), neq(P,S) |- (--(&&,(P && S),A..+) ==> X), (Belief:IntersectionSym)
        //(--(&&,P,A..+) ==> X), (--(&&,S,A..+) ==> X), neq(P,S) |- (--(&&,(P || S),A..+) ==> X), (Belief:UnionSym)


//    //Contradiction Neutralize
//    ((&&,Y,A..+) ==> X), ((&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#")     |- ((&&,A..+) ==> X), (Belief:Intersection)
//      ((&&,Y,A..+) ==> X), ((&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#")     |- --((&&,A..+) ==> X), (Belief:IntersectionNN)
//    (--(&&,Y,A..+) ==> X), (--(&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#") |- (--(&&,A..+) ==> X), (Belief:Intersection)
//      (--(&&,Y,A..+) ==> X), (--(&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#") |- --(--(&&,A..+) ==> X), (Belief:IntersectionNN)
//    (X ==> (&&,Y,A..+)), (X ==> (&&,Z,A..+)), eqNeg(Y,Z), --is(X,"#")     |- (X ==> (&&,A..+)), (Belief:Intersection)
//        (X ==> (&&,Y,A..+)), (X ==> (&&,Z,A..+)), eqNeg(Y,Z), --is(X,"#")     |- --(X ==> (&&,A..+)), (Belief:IntersectionNN)

//      (Y ==> X), (Z ==> X), eqNeg(Y,Z), --is(X,"#")                       |- (#1 ==> X), (Belief:Intersection)
//          (Y ==> X), (Z ==> X), eqNeg(Y,Z), --is(X,"#")                       |- --(#1 ==> X), (Belief:IntersectionNN)


//            B, ((&&,C,A..+) ==> X), neq(B,C) |- unisubst(((&&,A..+) ==> X),C,B), (Belief:Deduction)
//            B, ((&&,--C,A..+) ==> X), neq(B,C) |- unisubst(((&&,A..+) ==> X),C,B), (Belief:DeductionN)
//                B, (--(&&,C,A..+) ==> X), neq(B,C), notImpl(B) |- (--,unisubst(((&&,A..+) ==> X),C,B)), (Belief:Deduction)
//                B, (--(&&,--C,A..+) ==> X), neq(B,C), notImpl(B) |- (--,unisubst(((&&,A..+) ==> X),C,B)), (Belief:DeductionN)

            //(Y --> P), ((&&,(X-->P),A..+) ==> Z),neq(X,Y) |- unisubst(((&&,(X-->P),A..+) ==> Z), X,Y,novel), (Belief:Deduction)
              //  (Y --> P), ((&&,--(X-->P),A..+) ==> Z),neq(X,Y) |- unisubst(((&&,--(X-->P),A..+) ==> Z), X,Y,novel), (Belief:DeductionN)
            //(Y --> P), (Z ==> (&&,(X-->P),A..+)),neq(X,Y) |- unisubst((Z ==> (&&,(X-->P),A..+)), X,Y,novel), (Belief:Deduction)
              //  (Y --> P), (Z ==> (&&,--(X-->P),A..+)),neq(X,Y) |- unisubst((Z ==> (&&,--(X-->P),A..+)), X,Y,novel), (Belief:DeductionN)


    //Conj/Impl Chain Deduction
    (X ==> Y), (C ==> Z), eventOf(C,Y)      |-   ((X && conjWithout(C,  Y)) ==> Z), (Belief:DeductionPP, Time:Compose)
      (X ==> Y), (C ==> Z), eventOf(C,Y)    |- --((X && conjWithout(C,  Y)) ==> Z), (Belief:DeductionPN, Time:Compose)
    (X ==> Y), (C ==> Z), eventOfNeg(C,Y)   |-   ((X && conjWithout(C,--Y)) ==> Z), (Belief:DeductionNP, Time:Compose)
      (X ==> Y), (C ==> Z), eventOfNeg(C,Y) |- --((X && conjWithout(C,--Y)) ==> Z), (Belief:DeductionNN, Time:Compose)

    //Disj/Impl Chain Deduction
    (X ==> Y), (--D ==> Z), eventOfNeg(D,Y)     |-   (X ==> Z), (Belief:DeductionPP, Time:Compose)
      (X ==> Y), (--D ==> Z), eventOfNeg(D,Y)   |- --(X ==> Z), (Belief:DeductionPN, Time:Compose)
    (X ==> Y), (--D ==> Z), eventOf(D,Y)        |-   (X ==> Z), (Belief:DeductionNP, Time:Compose)
      (X ==> Y), (--D ==> Z), eventOf(D,Y)      |- --(X ==> Z), (Belief:DeductionNN, Time:Compose)

    //Conj/Impl Chain Swap Deduction
//    //TODO use conj ops
//    ((&&,X,A..+) ==> Z), (Y ==> X)  |- ((&&,Y,A..+) ==> Z), (Belief:Deduction)
//     (Y ==> X), ((&&,X,A..+) ==> Z)   |- ((&&,Y,A..+) ==> Z), (Belief:Deduction)
//        ((&&,--X,A..+) ==> Z), (Y ==> X)  |- ((&&,Y,A..+) ==> Z), (Belief:DeductionPN)
//         (Y ==> X), ((&&,--X,A..+) ==> Z)  |- ((&&,Y,A..+) ==> Z), (Belief:DeductionN)

    //Primary Inverting Sub-Condition (Equivalence emulation)
//    ((&&,X,A..+) ==> Z), ((&&,--X,A..+) ==> Z)    |- ((X ==> Z) && (--X ==> --Z)), (Belief:AbductionPN)
//    ((&&,X,A..+) ==> Z), ((&&,--X,A..+) ==> Z)    |- ((X ==> --Z) && (--X ==> Z)), (Belief:AbductionNP)
//       (Z ==> (&&,X,A..+)), (--Z ==> (&&,--X,A..+)) |- ((Z ==> X) && (--Z ==> --X)), (Belief:AbductionPB)


    //conditional induction
    ((&&,Y,A..+) ==> X), (Y ==> Z) |- ((&&,  Z,A..+) ==> X), (Belief:InductionPP)
    ((&&,Y,A..+) ==> X), (Y ==> Z) |- ((&&,--Z,A..+) ==> X), (Belief:InductionPN)

    ((&&,X,A..+) ==> Z), ((&&,Y,A..+) ==> Z) |- (Y ==> X), (Belief:InductionPB)
      (--(&&,X,A..+) ==> Z), (--(&&,Y,A..+) ==> Z) |- (Y ==> X), (Belief:InductionPB)


        //TODO disj

    //Anti-conditional Abduction via Multi-conditional Syllogism
    //(C ==> X), (E ==> Y), eventOf(C,E)      |-    unisubst(--conjWithout(C,E),X,Y), (Belief:AbductionXOR)
        //TODO disj





//        (C ==> Z), (X ==> M), eventOf(C,X) |- ((conjWithout(C,X) &&   M) ==> Z), (Belief:InductionPB)
//        (C ==> Z), (X ==> M), eventOf(C,X) |- ((conjWithout(C,X) && --M) ==> Z), (Belief:InductionPBPN)

//        ((&&,M,X,A..*) ==> C), (Y ==> C) |- unisubst((M ==> C),X,Y), (Belief:AbductionPB)
//        ((&&,M,A..+) ==> X), ((&&,A..+) ==> Y) |- unisubst((M ==> X),X,Y,"$"), (Belief:AbductionPB)
//          (--(&&,M,A..+) ==> X), (--(&&,A..+) ==> Y) |- unisubst((--M ==> X),X,Y,"$"), (Belief:AbductionPB)
//        ((&&,M,A..+) ==> X), ((&&,A..+) ==> Y) |- unisubst((M ==> Y),Y,X,"$"), (Belief:AbductionPB)
//          (--(&&,M,A..+) ==> X), (--(&&,A..+) ==> Y) |- unisubst((--M ==> Y),Y,X,"$"), (Belief:AbductionPB)
//

    //general implication induction
//    (A ==> B), X, neq(A,X), neq(A,--X), --is(X,"==>"), --eventOf(A,X)      |- ((A && X) ==> B), (Belief:Induction)
//    (A ==> B), X, neq(A,X), neq(A,--X), --is(X,"==>"), --eventOfNeg(A,X)   |- ((A && --X) ==> B), (Belief:InductionPN)

  (&&,(X<->Y),A..+), (X<->Y)         |- substitute((&&,A..+),X,Y,novel), (Belief:StructuralDeduction, Goal:StructuralDeduction)
  //chain:
  (&&,(X<->Y),A..+), (Y<->Z)         |- substitute((&&,A..+),X,Z,novel), (Belief:Analogy, Goal:Analogy)
  (&&,(X<->Y),(Y<->Z),A..+), (X<->Y) |- substitute(substitute((&&,A..+),X,Z,novel),Y,Z,novel), (Belief:StructuralDeduction, Goal:StructuralDeduction)



// Mutex induction
    (&&,X,--Y,A..*), (&&,Y,--X,A..*),neq(X,Y)                 |- (&&,--(X && Y),A..*), (Belief:Intersection)
//    (&&,X,--Y,A..+), (&&,Y,--X,B..+),neq(A..+,B..+)  |- (&&,--((&&,A..+) && (&&,B..+))), (Belief:Intersection)
//
//    (  (&&,X,--Y,A..*)==>Z), (  (&&,Y,--X,A..*)==>Z)     |- (  (&&,--(X && Y),A..*) ==>   Z), (Belief:IntersectionPP)
//    (  (&&,X,--Y,A..*)==>Z), (  (&&,Y,--X,A..*)==>Z)     |- (  (&&,--(X && Y),A..*) ==> --Z), (Belief:IntersectionNN)
//    (--(&&,X,--Y,A..*)==>Z), (--(&&,Y,--X,A..*)==>Z)     |- (--(&&,--(X && Y),A..*) ==>   Z), (Belief:IntersectionPP)
//    (--(&&,X,--Y,A..*)==>Z), (--(&&,Y,--X,A..*)==>Z)     |- (--(&&,--(X && Y),A..*) ==> --Z), (Belief:IntersectionNN)

      (&&,X,--Y,A..*), (&&,Y,--X,A..*),neq(X,Y)               |-  (  X ==> --Y), (Belief:AbductionPB)
      (&&,X,--Y,A..*), (&&,Y,--X,A..*),neq(X,Y)               |-  (--Y ==>   X), (Belief:InductionPB)



//// multi-conditional syllogism ////////////////////////////////////////////////////////////////////////////////////
//Inference about the pre/postconditions

//    ((&&,M,A_1..n) ==> C), M, not_implication_or_equivalence(M) |- ((&&,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//    ((&&,M,A_1..n) ==> C), ((&&,A_1..n) ==> C) |- M, (Truth:Abduction, Order:ForAllSame)

//conditional deduction/abduction
//   original:   ((&&,M,A_1..n) ==> C), M, not_implication_or_equivalence(M) |- ((&&,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//   original:   ((&&,M,A_1..n) ==> C), (A ==> M) |- ((&&,A,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//   original:   ((&&,M,A_1..n) ==> C), ((&&,A_1..n) ==> C) |- M, (Truth:Abduction, Order:ForAllSame)
//   original:   ((&&,A,A_1..n) ==> C), (A ==> M) |- ((&&,M,A_1..n) ==> C), (Truth:Abduction, Order:ForAllSame)
//   original:   ((&&,A_1..n) =\> C), M, not_implication_or_equivalence(M) |- ((&&,M,A_1..n) =\> C), (Truth:Induction)
//   original:   ((&&,M,A_1..n) ==> C), ((&&,A,A_1..n) ==> C) |- (A ==> M), (Truth:Induction, Order:ForAllSame)

        //((&&,M,A..+) ==> C), M,                  |- ((&&,A..+) ==> C), (Belief:Deduction)

    //(X ==> C), (B ==> M), eventOf(X,M) |- ((conjWithout(X,M) && B) ==> C), (Belief:Deduction)
    //(X ==> C), (B ==> M), eventOfNeg(X,M) |- ((conjWithout(X,--M) && B) ==> C), (Belief:DeductionPN)
        //((&&,M,A..+) ==> C), (B ==> M), neq(B,M) |- ((&&,B,A..+) ==> C), (Belief:Deduction)

                //((&&,M,A..+) ==> Y), ((&&,A..+) ==> Y)          |- M, (Belief:AbductionPB)
                //((&&,M,A) ==> Y),    (A ==> Y)                  |- M, (Belief:AbductionPB)
                    //(--(&&,M,A..+) ==> Y), (--(&&,A..+) ==> Y)  |- M, (Belief:AbductionPB)
                    //(--(&&,M,A) ==> Y),    (--A ==> Y)          |- M, (Belief:AbductionPB)

            //(C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+))   |- (X ==> Y), (Belief:Abduction)
            //(C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+))   |- (Y ==> X), (Belief:Abduction)

        //    ((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- (X ==> Y), (Belief:Induction)
        //    ((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- (Y ==> X), (Belief:Induction)
        //        (--(&&,X,A..+) ==> C), (--(&&,Y,A..+) ==> C)   |- (X ==> Y), (Belief:Induction)
        //        (--(&&,X,A..+) ==> C), (--(&&,Y,A..+) ==> C)   |- (Y ==> X), (Belief:Induction)
        //        //(--(&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)  ???
        //        //(--(&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)  ???







    //Conjunction Anti-Contradiction: ((X&&A)==>C) and ((--X&&A)==>C)  |-  (A==>C), since X or --X doesnt make a difference
    //((&&,X,A..+) ==> C), (D ==> C), eventOfNeg(D,X)  |- ((&&,A..+) ==> C), (Belief:InductionPB)
        //(--(&&,X,A..+) ==> C), (--D ==> C), eventOfNeg(D,X)  |- ((--,(&&,A..+)) ==> C), (Belief:InductionPB)
    //(C ==> (&&,X,A..+)), (C ==> D), eventOfNeg(D,X)  |- (C ==> (&&,A..+)), (Belief:AbductionPB)

//precondition/post-condition combiner inference rule (variable_unification6):




//        <patham9>
//      this rule says:
//        if two different precondition conjunctions, with a common element lead to the same conclusion,
//        it might be that these different preconditions in the specific conjunctions imply each other
//        because the premises can be swapped for this rule and it is still valid
    (A ==> X), (B ==> X), eventCommon(A,B), neq(A,B) |- (conjWithout(A,B) ==> conjWithout(B,A)), (Belief:InductionPB)
      //? (--A ==> X), (--B ==> X), eventCommon(A,B) |- (conjWithout(A,B) ==> conjWithout(B,A)), (Belief:InductionPB)
    (A ==> X), (B ==> X), eventCommon(A,B), neq(A,B) |- (conjWithout(B,A) ==> conjWithout(A,B)), (Belief:InductionPB)
      //? (--A ==> X), (--B ==> X), eventCommon(A,B) |- (conjWithout(B,A) ==> conjWithout(A,B)), (Belief:InductionPB)

        //((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- ((X ==> Y) && (Y ==> X)), (Bel4ief:InductionPB)

    (X ==> A), (X ==> B), eventCommon(A,B), neq(A,B) |- (conjWithout(A,B) ==> conjWithout(B,A)), (Belief:AbductionPB)
    (X ==> A), (X ==> B), eventCommon(A,B), neq(A,B) |- (conjWithout(B,A) ==> conjWithout(A,B)), (Belief:AbductionPB)






//// conjunction decompose AND dependent variable elimination - decomposition with elimination of a variable

        //, Goal:StructuralStrong
           //maybe subOf?
        //C, X, eventOfPN(C,X)  |- conjWithoutPN(C,X), (Belief:StructuralDeduction, Goal:StructuralStrong)
        //C, X, task("!"), eventOfPN(C,X)  |- conjWithoutPN(C,X), (Punctuation:Quest)













     //((&&,X,A..+) && Z), Z |- (X && Z), (Belief:StructuralDeduction, Goal:StructuralDeduction)
     //(Z && (&&,X,A..+)), Z |- (Z && X), (Belief:StructuralDeduction, Goal:StructuralDeduction)
        //((&&,X,A..+) && (--,%Z)), Z |- (X && (--,%Z)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
        //((--,%Z) && (&&,X,A..+)), Z |- ((--,%Z) && X), (Belief:StructuralDeduction, Goal:StructuralDeduction)

//     (&&,X,A..+), B, task("!") |- unisubst((&&,A..+),X,B), (Goal:Desire)
//        (&&,(--,%X),A..+), B,  task("!") |- unisubst((&&,A..+),X,B), (Goal:DesirePN)

     //X, (&&,X,A..+),            task("?@") |- (&&,A..+), ()
     //   X, (&&,(--,%X),A..+),   task("?@") |- (&&,A..+), ()
     //B, (A==>B),                task("?@") |- A, ()
     //A, (A==>B),                task("?@") |- B, ()
     //A, ((--,%A)==>B),          task("?@") |- B, ()


     //(&&,X,A..+), X, task("?@") |- (&&,A..+), ()
     //   (&&,(--,%X),A..+), X, task("?@") |- (&&,A..+), ()


     //B, C, belief("&&") |- subIfUnifiesDep(dropAnyEvent(C),X,B), (Belief:AnonymousAnalogy)
                //,Goal:Deduction
                //Goal:Goduction)

///// conjunction decompose
//
//    (&&,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&/,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&|,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&/,B,A_1..n), B, task("!") |- (&/,A_1..n), (Truth:Deduction, Desire:Strong, SequenceIntervals:FromPremises)
//
////// propositional decomposition ////////////////////////////////////////////////////////////////////////////////////
////If S is the case, and (&&,S,A_1..n) is not the case, it can't be that (&&,A_1..n) is the case
//
//    S, (&/,S,A_1..n) |- (&/,A_1..n), (Truth:DecomposePositiveNegativeNegative, SequenceIntervals:FromPremises)
//    S, (&|,S,A_1..n) |- (&|,A_1..n), (Truth:DecomposePositiveNegativeNegative)
//    S, (&&,S,A_1..n) |- (&&,A_1..n), (Truth:DecomposePositiveNegativeNegative)
//    S, (||,S,A_1..n) |- (||,A_1..n), (Truth:DecomposeNegativePositivePositive)
//
////Additional for negation: https://groups.google.com/forum/#!topic/open-nars/g-7r0jjq2Vc
//
//    S, (&/,(--,S),A_1..n) |- (&/,A_1..n), (Truth:DecomposeNegativeNegativeNegative, SequenceIntervals:FromPremises)
//    S, (&|,(--,S),A_1..n) |- (&|,A_1..n), (Truth:DecomposeNegativeNegativeNegative)
//    S, (&&,(--,S),A_1..n) |- (&&,A_1..n), (Truth:DecomposeNegativeNegativeNegative)
//    S, (||,(--,S),A_1..n) |- (||,A_1..n), (Truth:DecomposePositivePositivePositive)

////strong unification
//    (Y ==> X), Z, --is(Z,"==>")     |- unisubst(X,Y,Z), (Belief:Deduction)
//    (Y ==> X), Z, --is(Z,"==>")     |- --unisubst(X,Y,Z), (Belief:DeductionNP)
//    (--Y ==> X), Z, --is(Z,"==>")   |- unisubst(X,Y,Z), (Belief:DeductionPN)
//    (--Y ==> X), Z, --is(Z,"==>")   |- --unisubst(X,Y,Z), (Belief:DeductionNN)
//      (Y ==> X), Z, --is(Z,"==>")     |- unisubst(Y,X,Z), (Belief:Abduction)
//      (Y ==> X), Z, --is(Z,"==>")     |- unisubst(Y,X,Z), (Belief:AbductionNN)
//        (Y ==> X), Z, --is(Z,"==>"), task("?") |- unisubst(Y,X,Z), (Punctuation:Question)
//        (Y ==> X), Z, --is(Z,"==>"), task("?") |- unisubst(X,Y,Z), (Punctuation:Question)
//        (--Y ==> X), Z, --is(Z,"==>"), task("?") |- unisubst(X,Y,Z), (Punctuation:Question)
//

//    (X ==> Y), Z, notImpl(Z)     |- unisubst(X,Y,Z), (Belief:AbductionPB)

