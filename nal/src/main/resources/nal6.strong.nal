post {
    B, (X ==> A), --is(B,"==>"), --isVar(X) |- unisubst(X,A,B,"$"), (Belief:PostWeak, Time:TaskEvent)

    //goal
    //      taskimmediate = task time
    //      beliefevent = subjunctive ("would have"),
    //         producing differently tensed (occurrence) results depending on the timing involved
   B, (X ==> A), --is(B,"==>"), --isVar(X) |-   unisubst(X,A,B,"$"), (Goal:PostPP, Time:TaskImmediate)
     //B, (X ==> A), --is(B,"==>"), --isVar(X)   |-   unisubst(X,A,B,"$"), (Goal:PostPP, Time:BeliefEvent)
}
post_antigoal {
//    //SUSPECT
//     B, (X ==> A), --is(B,"==>"), --isVar(X)   |- --unisubst(X,A,B,"$"), (Goal:PostNP, Time:TaskEvent)
//       B, (X ==> A), --is(B,"==>"), --isVar(X) |- --unisubst(X,A,B,"$"), (Goal:PostNP, Time:TaskImmediate)
}

pre {
     B, (  X ==> C), --is(X,"--"), --is(B,"==>"), --isVar(C)       |-   unisubst(C,X,B,"$"),  (Belief:DeductionRecursivePP, Time:TaskEvent)
     (  X ==> C), B, --is(X,"--"), --is(B,"==>"), --isVar(C)       |-   unisubst(C,X,B,"$"),  (Belief:DeductionRecursivePP, Time:BeliefEvent)
         B, (  X ==> C), --is(X,"--"), --is(B,"==>"), --isVar(C)   |- --unisubst(C,X,B,"$"),  (Belief:DeductionRecursivePN, Time:TaskEvent)
         (  X ==> C), B, --is(X,"--"), --is(B,"==>"), --isVar(C)   |- --unisubst(C,X,B,"$"),  (Belief:DeductionRecursiveNP, Time:BeliefEvent)
       B, (--X ==> C), --is(X,"--"),--is(B,"==>"), --isVar(C)                   |-   unisubst(C,X,B,"$"),  (Belief:DeductionRecursiveNP,  Time:TaskEvent)
       (--X ==> C), B, --is(X,"--"),--is(B,"==>"), --isVar(C)                   |-   unisubst(C,X,B,"$"),  (Belief:DeductionRecursivePN,                   Time:BeliefEvent)
           B, (--X ==> C), --is(X,"--"),--is(B,"==>"), --isVar(C)               |- --unisubst(C,X,B,"$"),  (Belief:DeductionRecursiveNN,  Time:TaskEvent)
           (--X ==> C), B, --is(X,"--"),--is(B,"==>"), --isVar(C)               |- --unisubst(C,X,B,"$"),  (Belief:DeductionRecursiveNN,                   Time:BeliefEvent)

    B, (  X ==> C), --is(B,"==>"), --isVar(C), --is(X,"--")   |-  unisubst(C,X,B,"$"),  (Goal:DesireWeakPPX, Time:TaskEvent)
    B, (--X ==> C), --is(B,"==>"), --isVar(C), --is(X,"--")   |-  unisubst(C,X,B,"$"),  (Goal:DesireWeakNPX, Time:TaskEvent)
}


impl_question_unify_subj {
      B, (  A ==> C), task("?@"), --is(A,"--"), --is(B,"==>")   |- unisubst(  (A ==> C),A,B,novel), (Punctuation:Question, Time:Task)
        B, (--A ==> C), task("?@"), --is(A,"--"), --is(B,"==>") |- unisubst((--A ==> C),A,B,novel), (Punctuation:Question, Time:Task)
      B, (  A ==> C), task("?@"), --is(A,"--"), --is(B,"==>")   |- unisubst(  (A ==> C),C,B,novel), (Punctuation:Question, Time:Task)
}
impl_question_unify_pred {
      B,     (C ==> A), task("?@"), --is(B,"==>") |- unisubst((C ==> A),A,B,novel), (Punctuation:Question, Time:Task)
}
impl_question_unify_subj_component {
      B,     (C ==> A), task("?@"), --is(C,{"--","#"}), --is(B,"==>") |- unisubst(A,C,B,novel), (Punctuation:Question, Time:TaskEvent)
        B, (--C ==> A), task("?@"), --is(C,{"--","#"}), --is(B,"==>") |- unisubst(A,C,B,novel), (Punctuation:Question, Time:TaskEvent)
}
impl_question_unify_pred_component {
      B,     (C ==> A), task("?@"), --is(C,{"--","#"}), --is(B,"==>") |- unisubst(C,A,B,novel), (Punctuation:Question, Time:TaskEvent)
}
