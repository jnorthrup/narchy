//this needs some cleanup


//conditional abduction by dependent variable

    ((X --> R) ==> Z), ((&&,(#Y --> B),(#Y --> R),A..*) ==> Z)  |- (X --> B), (Belief:AbductionPB)
        (--(X --> R) ==> Z), ((&&,(#Y --> B),--(#Y --> R),A..*) ==> Z) |- (X --> B), (Belief:AbductionPB)


//// second level variable handling rules ////////////////////////////////////////////////////////////////////////////////////
//second level variable elimination (termlink level2 growth needed in order for these rules to work)

    (B --> K),     (&&,A..+,   (($Y --> K) ==> C)) |- substitute((C && A..+), $Y, B), (Belief:Deduction)
        (B --> K), (&&,A..+, (--($Y --> K) ==> C)) |- substitute((C && A..+), $Y, B), (Belief:DeductionN)
    (K --> B),     (&&,A..+,   ((K --> $Y) ==> C)) |- substitute((C && A..+), $Y, B), (Belief:Deduction)
        (K --> B), (&&,A..+, (--(K --> $Y) ==> C)) |- substitute((C && A..+), $Y, B), (Belief:DeductionN)
      //(K --> B), (&&,(#X --> L),((K --> $Y) ==> A)) |- substitute(((#X --> L) && A), $Y, B), (Belief:Deduction)
        //(K --> B), (&&,(#X --> L),((--,(K --> $Y)) ==> A)) |- substitute(((#X --> L) && A), $Y, B), (Belief:DeductionN)

//    (B --> K), (($X --> L) ==> (&&,(#Y --> K),A..+)) |- substitute((($X --> L) ==> (&&,A..+)),#Y,B), (Belief:AnonymousAnalogy)
//        (B --> K), (($X --> L) ==> (&&,--(#Y --> K),A..+)) |- substitute((($X --> L) ==> (&&,A..+)),#Y,B), (Belief:AnonymousAnalogyN)
//    (K --> B), ((L --> $X) ==> (&&,(K --> #Y),A..+)) |- substitute(((L --> $X) ==> (&&,A..+)),#Y,B), (Belief:AnonymousAnalogy)
//        (K --> B), ((L --> $X) ==> (&&,--(K --> #Y),A..+)) |- substitute(((L --> $X) ==> (&&,A..+)),#Y,B), (Belief:AnonymousAnalogyN)

//    Y, (&&,X,A..+), neq(X,Y) |- unisubst((&&,A..+),X,Y), (Belief:Deduction)
//        Y, (&&,--X,A..+), neq(X,Y) |- unisubst((&&,A..+), X,Y), (Belief:DeductionN)

//    (Y --> P), (&&,(X-->P),A..+), neq(X,Y) |- unisubst((&&,A..+), X,Y,novel), (Belief:Deduction)
//        (Y --> P), (&&,--(X-->P),A..+), neq(X,Y) |- unisubst((&&,A..+), X,Y,novel), (Belief:DeductionN)


    //(Y --> P), (&&,(X-->P),A..+),neq(X,Y) |- unisubst((&&,(X-->P),A..+), X,Y,novel), (Belief:Deduction)
        //(Y --> P), (&&,--(X-->P),A..+),neq(X,Y) |- unisubst((&&,--(X-->P),A..+), X,Y,novel), (Belief:DeductionN)
      //(P --> Y), (&&,(P-->X),A..+),neq(X,Y) |- unisubst((&&,(P-->X),A..+), X,Y,novel), (Belief:Deduction)
        //  (P --> Y), (&&,--(P-->X),A..+),neq(X,Y) |- unisubst((&&,--(P-->X),A..+), X,Y,novel), (Belief:DeductionN)

//      Y, ((&&,X,A..+) ==> Z), neq(X,Y) |- unisubst(((&&,X,A..+) ==> Z), X,Y,novel), (Belief:Deduction)
      //(P --> Y), ((&&,(P-->X),A..+) ==> Z),neq(X,Y) |- unisubst(((&&,(P-->X),A..+) ==> Z), X,Y,novel), (Belief:Deduction)
          //(P --> Y), ((&&,--(P-->X),A..+) ==> Z),neq(X,Y) |- unisubst(((&&,--(P-->X),A..+) ==> Z), X,Y,novel), (Belief:DeductionN)

//      Y, (Z ==> (&&,X,A..+)),neq(X,Y) |- unisubst((Z ==> (&&,X,A..+)), X,Y,novel), (Belief:Deduction)
      //(P --> Y), (Z ==> (&&,(P-->X),A..+)),neq(X,Y) |- unisubst((Z ==> (&&,(P-->X),A..+)), X,Y,novel), (Belief:Deduction)
        //(P --> Y), (Z ==> (&&,--(P-->X),A..+)),neq(X,Y) |- unisubst((Z ==> (&&,--(P-->X),A..+)), X,Y,novel), (Belief:DeductionN)



// conditional deduction "An inverse inference has been implemented as a form of deduction" https://code.google.com/p/open-nars/issues/detail?id=40&can=1

//    (U --> L), ((&&,(#X --> L),(#X --> R),A..*) ==> Z), neq(U,R) |- substitute((((&&,A..*) && (U --> R)) ==> Z),#X,U), (Belief:Deduction)
//        (U --> L), ((&&,--(#X --> L),(#X --> R),A..*) ==> Z), neq(U,R) |- substitute((((&&,A..*) && (U --> R)) ==> Z),#X,U), (Belief:DeductionN)




