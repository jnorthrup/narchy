//   see:
//      https://en.wikipedia.org/wiki/Fluid_Concepts_and_Creative_Analogies
//      https://cogsci.indiana.edu/

// inheritance from similarty
    (S <-> P), P  |- (S --> P), (Belief:Identity, Goal:Identity)

////// similarity-based syllogism ////////////////////////////////////////////////////////////////////////////////////


      (M --> P), (S <-> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Belief:Analogy, Time:Compose)
        (M --> P), (S <-> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Goal:DesireWeak, Time:Task)
       (M <-> P), (S --> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Belief:AnalogyX, Time:Compose)
        (M <-> P), (S --> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Goal:DesireWeak, Time:Task)
      (S --> M), (P <-> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Belief:Analogy, Time:Compose)
        (S --> M), (P <-> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Goal:DesireWeak, Time:Task)
       (M <-> S), (M --> P), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Belief:AnalogyX, Time:Compose)
         (M <-> S), (M --> P), neqRCom(S,P), has(S,"."), has(P,".") |- (S --> P), (Goal:DesireWeak, Time:Task)

      (S <-> P), (P --> S), has(S,"."), has(P,".")   |-   (S --> P), (Belief:Undesire, Time:Compose)
            //ReduceConjunction ~= Undesire ~= Divide
        (S --> P), (P --> S), has(S,"."), has(P,".")   |-   (S <-> P), (Punctuation:AskAsk, Time:Task)
        (S --> P), (S <-> P), has(S,"."), has(P,".")   |-   (P --> S), (Punctuation:AskAsk, Time:Task)

//        (S <-> P), (P --> S), --isVar(S), --isVar(P)   |-   (S --> P), (Goal:Desire, Time:Task)
//        (S <-> P), (P --> S), --isVar(S), --isVar(P)   |-   (P --> S), (Goal:Undesire, Time:Task)

//      (S <-> P), (S <-> M), --isVar(S), --isVar(P)   |-   (S <-> M), (Goal:Undesire, Time:Task)

      (S --> P), (P --> S), has(S,"."), has(P,".")   |-   (S <-> P), (Belief:Intersection, Time:Compose)
        (S --> P), (P --> S), has(S,"."), has(P,".")   |-   (S <-> P), (Goal:DesirePP, Time:Task)
        //(S --> P), (P --> S), has(S,"."), has(P,".")   |- --(S <-> P), (Goal:DesireNN, Time:Task)


      (M <-> P), (S <-> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S <-> P), (Belief:Resemblance, Time:Compose)
        (M <-> P), (S <-> M), neqRCom(S,P), has(S,"."), has(P,".") |-   (S <-> P), (Goal:DesirePP, Time:Task)
        //(M <-> P), (S <-> M), neqRCom(S,P), has(S,"."), has(P,".") |- --(S <-> P), (Goal:DesirePN, Time:Task)

      (P --> M), (S --> M), neqRCom(S,P), has(S,"."), has(P,".") |- (S <-> P), (Belief:Comparison, Time:Compose)
      (M --> P), (M --> S), neqRCom(S,P), has(S,"."), has(P,".") |- (S <-> P), (Belief:Comparison, Time:Compose)
        //these Comparison rules used to have: Goal:DesireWeak but seems presumptuous, even if weak

//Structural Analogy
      ((A-->B) <-> (A-->C)), A, neqRCom(B,C), has(B,"."), has(C,".") |- (B <-> C), (Belief:StructuralDeductionWeak, Goal:StructuralDeductionWeak)
      ((B-->A) <-> (C-->A)), A, neqRCom(B,C), has(B,"."), has(C,".") |- (B <-> C), (Belief:StructuralDeductionWeak, Goal:StructuralDeductionWeak)


// the similarity beliefs here act as a sort of transistor switch in determining Desire result truth

Z, (X <-> Y), neq(Z,X), neq(Z,Y), --isVar(X), --isVar(Y)  |-   unisubst(Y, X, Z, "$"), (Punctuation:AskAsk, Time:Task)
Z, (X <-> Y), neq(Z,X), neq(Z,Y), --isVar(X), --isVar(Y)  |-   unisubst(Y, X, Z, "$"), (Belief:DesireWeakPP, Time:Task)
//Z, (X <-> Y), neq(Z,X), neq(Z,Y), --isVar(X), --isVar(Y)  |- --unisubst(Y, X, Z, "$", novel), (Belief:DesireWeakPN, Time:Task)

    //X, (X <-> Y), --isVar(Y)                      |-   Y, (Punctuation:AskAll, Time:Task)
    //  X, (X <-> Y), --isVar(Y)                    |-   Y, (Belief:DesirePP, Goal:DesirePP, Time:Task)

 Z, (X <-> Y), in(Z,X), neq(Z,Y)   |- substitute(Z, X, polarizeBelief(Y), novel), (Punctuation:AskAsk, Time:Task)
//   Z, (X <-> Y), in(Z,X), neq(Z,Y) |- substitute(Z, X, Y, "$", novel), (Belief:DesireWeakPP, Time:Task)
   //Z, (X <-> Y), in(Z,X), neq(Z,Y)   |- substitute(Z, X, --Y, "$", novel), (Belief:DesireWeakPN, Time:Task)

//chain:
//  (&&,  (X<->Y),A..+), (X<->Y)         |- substitute((&&,A..+),X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReduction, Time:TaskEvent)
//    (&&,--(X<->Y),A..+), (X<->Y)         |- substitute((&&,A..+),X,--Y,novel), (Belief:StructuralReduction, Goal:StructuralReduction, Time:TaskEvent)
//    (&&,--(X<->Y),A..+), (X<->Y)         |- substitute((&&,A..+),--X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReduction, Time:TaskEvent)

//these would only be valid if =|> but not ==>+...
//  (&&,  (X==>Y),A..+), (X<->Y)         |- substitute((&&,A..+),X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReduction, Time:TaskEvent)
//    (&&,--(X==>Y),A..+), (X<->Y)         |- substitute((&&,A..+),X,--Y,novel), (Belief:StructuralReduction, Goal:StructuralReduction, Time:TaskEvent)
//    (&&,--(X==>Y),A..+), (X<->Y)         |- substitute((&&,A..+),--X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReduction, Time:TaskEvent)




//    X, (  X --> Y)                        |- Y, (Goal:DesireWeak, Time:Task)
//    X, (--X --> Y)                     |- Y, (Goal:DesireWeakN, Time:Task)
//        (X --> Y), X                         |- Y, (Goal:DesireWeak, Time:Task)
//                                                            //DesireWeakN
//        (--X --> Y), X                         |- Y, (Goal:DesireWeakPN, Time:Task)
//                                                            //DesireWeakNN
//    X, (Y -->   X)                        |- Y, (Goal:DesireWeak, Time:Task)
//    X, (Y --> --X)                     |- Y, (Goal:DesireWeakN, Time:Task)
//        (Y --> X), X                         |- Y, (Goal:DesireWeak, Time:Task)
//                                                           //DesireWeakN
//        (Y --> --X), X                         |- Y, (Goal:DesireWeakPN, Time:Task)
//                                                           //DesireWeakNN




  //(M --> P), (S <-> M), neqRCom(S,P) |- (S --> P), (Belief:Desire, Goal:Desire)
  //(P --> M), (S <-> M), neqRCom(S,P) |- (P --> S), (Belief:Desire, Goal:Desire)

  //wantX and X similar Y then want Y
    //X, (X<->Y)                          |- Y, (Belief:Desire, Goal:Desire)
    //Z, (X<->Y), in(Z,X), neq(Z,X), neq(Z,Y)  |- unisubst(Z, X, Y, novel), (Belief:Desire, Goal:Weak)

  //notWantX and notX similar Y then want Y

  //want/notWant X,  and not X similar Y then not/want Y
    //X, (X<->Y)                          |- --Y, (Goal:WeakPN)
    //X, (--X<->Y)                        |- --Y, (Goal:WeakNN)


    //Z, (X<->Y), inNeg(Z,X)             |- unisubst(Z, X, Y, novel, force), (Belief:DesireN, Goal:WeakN)
    //Z, (X<->Y), neq(Z,X), neq(Z,Y)    |- unisubst(Y, --X, Z, novel), (Belief:DesireN, Goal:WeakN)
      //X, (X<->Y)                 |- (--,Y), (Goal:WeakPN)
      //X, (--X<->Y)               |- (--,Y), (Goal:WeakNN)
      //(X-->A), (($1-->A)<->($1-->B)), neqRCom(X,B) |- (X-->B), (Belief:Desire, Goal:Induction)

//Similarity in Conjunction spreading
 //   (&&,(X<->Y),A..+), (Y<->Z), neqRCom(X,Z) |- (&&,(X<->Z),A..+), (Belief:Desire, Goal:Weak)
 //   (&&,--(X<->Y),A..+), (Y<->Z), neqRCom(X,Z) |- (&&,--(X<->Z),A..+), (Belief:Desire, Goal:Weak)
    //TODO (&&,(X<->Y),A..+), (&&,(Y<->Z),A..+), neq(X,Z) |- (&&,(X<->Z),A..+), (Belief:...

 //suspect:
// Z, (X<->Y), eqOrIn(X,Z), belief(negative)   |- (--, unisubst(Z, X, Y, novel, force)), (Belief:DesirePN, Goal:WeakPN)
//Z, (--X<->Y), eqOrIn(X,Z), belief(positive) |- unisubst(Z, X, Y, novel, force), (Belief:DesireN, Goal:WeakN)
 //Z, (--X<->Y), eqOrIn(X,Z), belief(negative) |- (--, unisubst(Z, X, Y, novel, force)), (Belief:DesireNN, Goal:WeakNN)

//these old rules are replaced by the above rules:
        //If M is a special case of P and S and M are similar, then S is also a special case of P (strong)

            //(M --> P), (S <-> M), neqRCom(S,P) |- (S --> P), (Belief:Desire, Goal:Desire)
                    //TODO write test case for this
            //(P --> M), (S <-> M), neqRCom(S,P) |- (P --> S), (Belief:Desire, Goal:Desire)
                    //TODO write test case for this
            //variable elimination 4b:

        //    (X --> A),        ((Y --> A)<->(Y --> C)),  neqRCom(X,C), neq(X,Y)      |- (X-->C), (Belief:Desire, Goal:Desire)
         //       (X --> A),  (--(Y --> A)<->(Y --> C)),  neqRCom(X,C), neq(X,Y)      |- (X-->C), (Belief:DesireN, Goal:DesireN)
          //  (A --> X),        ((A --> Y)<->(C --> Y)),  neqRCom(X,C), neq(X,Y)      |- (C-->X), (Belief:Desire, Goal:Desire)
          //      (A --> X),  (--(A --> Y)<->(C --> Y)),  neqRCom(X,C), neq(X,Y)      |- (C-->X), (Belief:DesireN, Goal:DesireN)
