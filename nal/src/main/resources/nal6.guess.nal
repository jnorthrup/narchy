// Contraposition (structural)
//    a→b == ¬b→¬a		# contra positition [Lex contrapositionis]
// "If not smoking causes health, being not healthy may be the result of smoking"
// "If smoking causes not health, being healthy may be the result of not smoking"

    (--S ==> P), P |- (--P ==> --S), (Belief:Contraposition)


// Conversion
//  If S can stand for P, P can to a certain low degree also represent the class S
//  If after S usually P happens, then it might be a good guess that usually before P happens, S happens.

    (P ==> S),   (S ==> P),  task("?"), neq(S,P), hasBelief()   |-     (polarizeBelief(P) ==> S),   (Belief:ConversionDepolarized, Punctuation:Belief)
    (--P ==> S), (S ==> P),  task("?"), neq(S,P), hasBelief()   |-     (polarizeBelief(P) ==> S),   (Belief:ConversionDepolarized, Punctuation:Belief)
    (P ==> S),   (--S ==> P),  task("?"), neq(S,P), hasBelief() |-   --(polarizeBelief(P) ==> S),   (Belief:ConversionDepolarized, Punctuation:Belief)







//Hypothesize Subcondition Identity
//      hypothesize that two subconditions which unify actually refer to the same target,
//      eliminating the variable and simplifying the statement

//      ex: ((f(x) && f($1)) ==> g($1))  |-   (f(x) ==> g(x))

    ((&&,X,Y,A..*) ==> Z), X, neq(X,Y), --isVar(X), --isVar(Y)   |- unisubst(((&&,X,Y,A..*) ==> Z),X,Y,strict), (Belief:StructuralReduction)
      ((&&,X,--Y,A..*) ==> Z), X, --isVar(X), --isVar(Y)   |- unisubst(((&&,X,--Y,A..*) ==> Z),X,Y,strict), (Belief:StructuralReduction)
    (Z ==> (&&,X,Y,A..*)), X, neq(X,Y), --isVar(X), --isVar(Y)    |- unisubst((Z ==> (&&,X,Y,A..*)),X,Y,strict), (Belief:StructuralReduction)
      (Z ==> (&&,X,--Y,A..*)), X, --isVar(X), --isVar(Y)    |- unisubst((Z ==> (&&,X,--Y,A..*)),X,Y,strict), (Belief:StructuralReduction)

    (&&,X,Y,A..*), X, neq(X,Y), --isVar(X), --isVar(Y)       |- unisubst((&&,X,Y,A..*),X,Y,strict), (Belief:StructuralDeduction, Goal:StructuralDeduction)
      (&&,X,--Y,A..*), X, --isVar(X), --isVar(Y)   |- unisubst((&&,X,--Y,A..*),X,Y,strict), (Belief:StructuralDeduction, Goal:StructuralDeduction)



//mutex induction from conjunction events
//    (&&,X,--Y,A..*), X, task(".") |- (X ==> --Y), (Belief:StructuralDeduction)

//implication to similarity (equivalence emulation)
//    (P ==> S), (S ==> P), task(".")   |-   (S <-> P),  (Punctuation:Question)
//    (P ==> S), (--S ==> P), task(".") |- (--S <-> P),  (Punctuation:Question)

    //all these are probably wrong:
        //(--P ==> S), (S ==> P),  task("?") |- (--P ==> --S), (Belief:ConversionPN, Punctuation:Belief)
        //(P ==> S), (--S ==> P),  task("?") |- (P ==> --S), (Belief:Conversion, Punctuation:Belief)
        //(P ==> S), (S ==> P),        task("?") |- ((--,%P) ==> S), (Belief:ConversionPN, Punctuation:Belief)
        //(P ==> S), ((--,%S) ==> P),  task("?") |- (--,((--,%P) ==> S)), (Belief:ConversionPN, Punctuation:Belief)

//and the backward inference driven forward inference:


//experimental:
    //([A] <-> {B}), (A <-> B), task("?") |- ([A] <-> {B}), (Belief:BeliefIdentity, Punctuation:Belief)
    //({A} <-> [B]), (A <-> B), task("?") |- ({A} <-> [B]), (Belief:BeliefIdentity, Punctuation:Belief)
    //([A] --> {B}), (A <-> B), task("?") |- ([A] --> {B}), (Belief:BeliefIdentity, Punctuation:Belief)
    //({A} --> [B]), (A <-> B), task("?") |- ({A} --> [B]), (Belief:BeliefIdentity, Punctuation:Belief)


//NAL3:

//TODO these may produce invalid beliefs if the input contains a query variable, this can be filtered before the rule is processed:



//disjunction
   //(&&,--B,A..+), B, task("?") |- (--,((&&,A..+) && --B)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)

////composition on both sides of a statement  TODO - quests handling of these
    //((A..+) --> Z), (X --> Y), task("?") |- ((A..+) --> substitute((A..+),X,Y,strict)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
        //contains(A..+,X),
    //(Z --> (A..+)), (X --> Y), task("?") |- (substitute((A..+),X,Y,strict) --> (A..+)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)

    //((A..+) <-> Z), (X <-> Y), task("?") |- ((A..+) <-> substitute((A..+),X,Y,strict)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
        //this one needs reviewed, it might need to be subIfUnified, and other problems




////implication of intersection to difference question
//    //TODO implement with only an op comparison (X ==> D) and a swap functor subSwap2(D), it would be simpler to match
//    (X ==> (A&B)), X, task("?")  |- (X ==> (A~B)), (Punctuation:Question)
//    ((A&B) ==> X), X, task("?")  |- ((A~B) ==> X), (Punctuation:Question)
//      (--(A&B) ==> X), X, task("?")  |- (--(A~B) ==> X), (Punctuation:Question)

//    Z, (X==>Y), task("?"), neq(Y,Z) |- unisubst((X ==> Y), Y, Z, "$", strict), (Belief:BeliefStructuralReduction, Punctuation:Belief)
