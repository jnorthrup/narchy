//X, C, eventOfPN(C,X)  |-    C,  (Punctuation:AskAsk, Time:TaskEvent)
X, (A==>C), eventOfPN(C,X), task("?@"), hasBelief()    |-    (A==>conjWithoutPN(C, X)),  (Punctuation:Question, Time:TaskEvent)
X, (C==>A), eventOfPN(C,X), task("?@"), hasBelief()    |-    (conjWithoutPN(C, X)==>A),  (Punctuation:Question, Time:TaskEvent)
X, (--C==>A), eventOfPN(C,X), task("?@"), hasBelief()  |-  (--conjWithoutPN(C, X)==>A),  (Punctuation:Question, Time:TaskEvent)



//Anonymous Analogy (NAL5)
//  originally this only unified depvar (dep var elimination)
//  TODO merge these ules into one, requires a variation on unisubst that can apply chooseUnifiableSubEvent in 2 ways
C, Y, is(C,"&&"), has(C,"#"), neq(C,Y), --isVar(Y)               |- conjWithoutUnify(C,chooseUnifiableSubEvent(C,Y)), (Belief:AnonymousAnalogyPP, Time:BeliefEvent)
C, Y, is(C,"&&"), has(C,"#"), neq(C,Y), --isVar(Y), has(C,"--")  |- conjWithoutUnify(C,chooseUnifiableSubEvent(C,--Y)), (Belief:AnonymousAnalogyPN, Time:BeliefEvent)
    //C, Y, is(C,"&&"), has(C,"#"), neq(C,Y), --isVar(Y)               |- unisubst(C,chooseUnifiableSubEvent(C,Y),Y,"#",novel), (Belief:AnonymousAnalogyPP, Time:TaskEvent)
    //C, Y, is(C,"&&"), has(C,"#"), neq(C,Y), --isVar(Y), has(C,"--")  |- unisubst(C,chooseUnifiableSubEvent(C,--Y),--Y,"#",novel), (Belief:AnonymousAnalogyPN, Time:TaskEvent)
        //Goal: ?

//Conjunction containing both pos/neg X drill-down question
C, X, eventOf(C,X), eventOfNeg(C,X) |- (conjWithoutPN(X) ==> X), (Punctuation:AskAll)


((&&,B,A..+) ==> X), (E ==> Y)          |-    unisubst((&&,A..+),(polarizeTask(X) && B),(polarizeBelief(Y) && E)), (Belief:AbductionDD, Time:TaskEvent)

    //Conditional Abduction via Multi-conditional Syllogism
    (C ==> X), (E ==> Y), eventOf(C,E)      |-    conjWithout(C,E), (Belief:AbductionPB, Time:Compose)
    (C ==> X), (--E ==> Y), eventOfNeg(C,E) |-    conjWithout(C,--E), (Belief:AbductionPB, Time:Compose)
      //(E ==> Y), (C ==> X), eventOf(C,E)      |-    conjWithout(C,E), (Belief:AbductionPBX)
      //(--E ==> Y), (C ==> X), eventOfNeg(C,E)      |-    conjWithout(C,--E), (Belief:AbductionPBX)

    //(C ==> X), (E ==> Y), eventOf(C,E)      |-    unisubst(conjWithout(C,E),X,Y,"$"), (Belief:AbductionPB, Time:Task)





  B, (C ==> X), --isVar(X), hasBelief() |- unisubst(X,C,B), (Punctuation:AskAsk, Time:BeliefEvent)
     (C ==> X), B, --isVar(X), hasBelief() |- unisubst(X,C,B), (Punctuation:AskAsk, Time:TaskEvent)
    B, (--C ==> X), --isVar(X), hasBelief() |- unisubst(X,C,B), (Punctuation:AskAsk, Time:BeliefEvent)
       (--C ==> X), B, --isVar(X), hasBelief() |- unisubst(X,C,B), (Punctuation:AskAsk, Time:TaskEvent)
  B, (X ==> C), --isVar(X), hasBelief() |- unisubst(X,C,B), (Punctuation:AskAsk, Time:BeliefEvent)
    (X ==> C), B, --isVar(X), hasBelief() |- unisubst(X,C,B), (Punctuation:AskAsk, Time:TaskEvent)

//    B, (X ==> A), --isVar(X), --is(B,"==>"), is(A,"&&") |- unisubst(X,chooseUnifiableSubEvent(A,B),B), (Punctuation:Ask, Time:Task)
//      B, (X ==> A), --isVar(X), --is(B,"==>"), is(A,"&&"), has(A,"--") |- unisubst(X,chooseUnifiableSubEvent(A,--B),--B), (Punctuation:Ask, Time:Task)
//    B, (A ==> X), --isVar(X), --is(B,"==>"), is(A,"&&") |- unisubst(X,chooseUnifiableSubEvent(A,B),B), (Punctuation:Ask, Time:Task)
//      B, (A ==> X), --isVar(X), --is(B,"==>"), is(A,"&&"), has(A,"--") |- unisubst(X,chooseUnifiableSubEvent(A,--B),--B), (Punctuation:Ask, Time:Task)
//           B, (--A ==> X), --isVar(X), --is(B,"==>"), is(A,"&&") |- unisubst(X,chooseUnifiableSubEvent(A,B),B), (Punctuation:Ask, Time:Task)
//              B, (--A ==> X), --isVar(X), --is(B,"==>"), is(A,"&&"), has(A,"--") |- unisubst(X,chooseUnifiableSubEvent(A,--B),--B), (Punctuation:Ask, Time:Task)

//  (C ==> X), B, neq(B,C), task("."), --isVar(B) |- unisubst((C ==> X),C,B,novel), (Punctuation:Question, Time:Task)
//    (--C ==> X), B, neq(B,C), task("."), --isVar(B) |- unisubst((--C ==> X),C,B,novel), (Punctuation:Question, Time:Task)
//  (X ==> C), B, neq(B,C), task("."), --isVar(B) |- unisubst((X ==> C),C,B,novel), (Punctuation:Question, Time:Task)




////Contraposition to Disjunction
//    (--S ==> P), (--S ==> P) |- (S || P), (Belief:StructuralDeduction)
//    (S ==> N),   (S ==> P)   |- (S || P), (Belief:StructuralDeductionN)


//Hypothesize Subcondition Identity
//      hypothesize that two subconditions which unify actually refer to the same target,
//      eliminating the variable and simplifying the statement

//      ex: ((f(x) && f($1)) ==> g($1))  |-   (f(x) ==> g(x))

    ((&&,X,Y,A..*) ==> Z), X, neq(X,Y), --isVar(X), --isVar(Y)   |- unisubst(((&&,X,Y,A..*) ==> Z),X,Y,novel), (Belief:StructuralReduction)
      ((&&,X,--Y,A..*) ==> Z), X, --isVar(X), --isVar(Y)   |- unisubst(((&&,X,--Y,A..*) ==> Z),X,Y,novel), (Belief:StructuralReduction)
    (Z ==> (&&,X,Y,A..*)), X, neq(X,Y), --isVar(X), --isVar(Y)    |- unisubst((Z ==> (&&,X,Y,A..*)),X,Y,novel), (Belief:StructuralReduction)
      (Z ==> (&&,X,--Y,A..*)), X, --isVar(X), --isVar(Y)    |- unisubst((Z ==> (&&,X,--Y,A..*)),X,Y,novel), (Belief:StructuralReduction)

    (&&,X,Y,A..*), X, neq(X,Y), --isVar(X), --isVar(Y)       |- unisubst((&&,X,Y,A..*),X,Y,novel), (Belief:StructuralDeduction, Goal:StructuralDeduction)
      (&&,X,--Y,A..*), X, --isVar(X), --isVar(Y)   |- unisubst((&&,X,--Y,A..*),X,Y,novel), (Belief:StructuralDeduction, Goal:StructuralDeduction)

//implication comparison: common cause or common effect
(X==>Z), (Y==>Z), neqPN(X,Y), hasBelief(), task(".") |- ((X && --Y) ==> Z), (Punctuation:Question, Time:Compose)
(X==>Z), (Y==>Z), neqPN(X,Y), hasBelief(), task(".") |- ((--X && Y) ==> Z), (Punctuation:Question, Time:Compose)
(Z==>X), (Z==>Y), neqPN(X,Y), hasBelief(), task(".") |- (Z ==> (X && --Y)), (Punctuation:Question, Time:Compose)
(Z==>X), (Z==>Y), neqPN(X,Y), hasBelief(), task(".") |- (Z ==> (--X && Y)), (Punctuation:Question, Time:Compose)

//conjunction comparison: common event
(X && Z), (Y && Z), neqPN(X,Y), neq(X,Z), neq(Y,Z), hasBelief() |- (X && --Y), (Punctuation:Ask, Time:Compose)
(X && Z), (Y && Z), neqPN(X,Y), neq(X,Z), neq(Y,Z), hasBelief() |- (Y && --X), (Punctuation:Ask, Time:Compose)

//mutex induction from conjunction events
//    (&&,X,--Y,A..*), X, task(".") |- (X ==> --Y), (Belief:StructuralDeduction)

//implication to similarity (equivalence emulation)
//    (P ==> S), (S ==> P), task(".")   |-   (S <-> P),  (Punctuation:Question)
//    (P ==> S), (--S ==> P), task(".") |- (--S <-> P),  (Punctuation:Question)

    //all these are probably wrong:
        //(--P ==> S), (S ==> P),  task("?") |- (--P ==> --S), (Belief:ConversionPN, Punctuation:Belief)
        //(P ==> S), (--S ==> P),  task("?") |- (P ==> --S), (Belief:Conversion, Punctuation:Belief)
        //(P ==> S), (S ==> P),        task("?") |- ((--,%P) ==> S), (Belief:ConversionPN, Punctuation:Belief)
        //(P ==> S), ((--,%S) ==> P),  task("?") |- (--,((--,%P) ==> S)), (Belief:ConversionPN, Punctuation:Belief)

//and the backward inference driven forward inference:


//experimental:
    //([A] <-> {B}), (A <-> B), task("?") |- ([A] <-> {B}), (Belief:BeliefIdentity, Punctuation:Belief)
    //({A} <-> [B]), (A <-> B), task("?") |- ({A} <-> [B]), (Belief:BeliefIdentity, Punctuation:Belief)
    //([A] --> {B}), (A <-> B), task("?") |- ([A] --> {B}), (Belief:BeliefIdentity, Punctuation:Belief)
    //({A} --> [B]), (A <-> B), task("?") |- ({A} --> [B]), (Belief:BeliefIdentity, Punctuation:Belief)


//NAL3:

//TODO these may produce invalid beliefs if the input contains a query variable, this can be filtered before the rule is processed:



//disjunction
   //(&&,--B,A..+), B, task("?") |- (--,((&&,A..+) && --B)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)

////composition on both sides of a statement  TODO - quests handling of these
    //((A..+) --> Z), (X --> Y), task("?") |- ((A..+) --> substitute((A..+),X,Y,novel)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
        //contains(A..+,X),
    //(Z --> (A..+)), (X --> Y), task("?") |- (substitute((A..+),X,Y,novel) --> (A..+)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)

    //((A..+) <-> Z), (X <-> Y), task("?") |- ((A..+) <-> substitute((A..+),X,Y,novel)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
        //this one needs reviewed, it might need to be subIfUnified, and other problems




////implication of intersection to difference question
//    //TODO implement with only an op comparison (X ==> D) and a swap functor subSwap2(D), it would be simpler to match
//    (X ==> (A&B)), X, task("?")  |- (X ==> (A~B)), (Punctuation:Question)
//    ((A&B) ==> X), X, task("?")  |- ((A~B) ==> X), (Punctuation:Question)
//      (--(A&B) ==> X), X, task("?")  |- (--(A~B) ==> X), (Punctuation:Question)

//    Z, (X==>Y), task("?"), neq(Y,Z) |- unisubst((X ==> Y), Y, Z, "$", novel), (Belief:BeliefStructuralReduction, Punctuation:Belief)
