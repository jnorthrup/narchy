//NAL3 single premise belief/goal decompose
(M --> I), X, eventOfPN(I,X)  |-   polarizeTask((M --> conjWithoutPN(I,X))), (Belief:StructuralDeductionDepolarized,Goal:StructuralDeductionDepolarized)
(I --> M), X, eventOfPN(I,X)  |-   polarizeTask((conjWithoutPN(I,X) --> M)), (Belief:StructuralDeductionDepolarized,Goal:StructuralDeductionDepolarized)

//NAL3 single premise question/quest decompose
( M --> I), X, eventOfPN(I,X) |- (M --> conjWithoutPN(I,X)), (Punctuation:AskAll)
( I --> M), X, eventOfPN(I,X) |- (conjWithoutPN(I,X) --> M), (Punctuation:AskAll)


//NAL3 double premise decompose
//  if (S --> M) is the case, and ((|,S,A..+) --> M) is not the case, then ((|,A..+) --> M) is not the case, hence Belief:DeductionPositiveNegativeNegative
    (M --> G), (M --> C), eventOf(C,G)        |-    (M -->   conjWithout(C,   G)), (Goal:DesirePP, Time:Task)
    (M --> G), (M --> C), eventOfNeg(C,G)     |-    (M -->   conjWithout(C, --G)), (Goal:DesireNP, Time:Task)
        (M --> G), (M --> C), eventOf(C,G)    |-    (M -->   conjWithout(C,   G)), (Goal:DesirePN, Time:Task)
        (M --> G), (M --> C), eventOfNeg(C,G) |-    (M -->   conjWithout(C, --G)), (Goal:DesireNN, Time:Task)
//(M --> G), (M --> C), eventOf(C,G)     |-  --(M --> --conjWithout(C,   G)), (Goal:DeductionNN, Time:Compose)
//(M --> G), (M --> C), eventOf(C,G)     |-  --(M --> --conjWithout(C, --G)), (Goal:DeductionPN, Time:Compose)
//(G --> M), (D --> M), eventOfNeg(C,G)     |-  --(conjWithout(D, --G) --> M), (Goal:DesirePN, Time:Compose)
//(G --> M), (D --> M), eventOf(C,G)     |-  --(conjWithout(D,   G) --> M), (Goal:DesireNN, Time:Compose)

//predicate (intensional, conj)
(M --> C), (M --> X),  eventOf(C,X)       |-    (M --> conjWithout(C,  X)), (Belief:DeductionPP, Goal:DeductionPP, Time:Compose)
(M --> C), (M --> X),  eventOfNeg(C,X)    |-    (M --> conjWithout(C,--X)), (Belief:DeductionPN, Goal:DeductionPN, Time:Compose)
  (M --> D), (M --> X),  eventOfNeg(D,X)  |-  --(M --> conjWithout(D,--X)), (Belief:DeductionNN, Goal:DeductionNN, Time:Compose)
  (M --> D), (M --> X),  eventOf(D,X)     |-  --(M --> conjWithout(D,  X)), (Belief:DeductionNP, Goal:DeductionNP, Time:Compose)

//  (M --> C), (M --> X),  eventOfNeg(C,X)     |-   --(M --> conjWithout( C,--X)), (Belief:DeductionPP, Goal:DeductionPP, Time:Compose)
//  (M --> C), (M --> X),  eventOf(C,X)  |-   --(M --> conjWithout( C,  X)), (Belief:DeductionPN, Goal:DeductionPN, Time:Compose)

//(M --> C), (M --> X),  eventOf(C,X)     |-  --(M --> conjWithout( C,  X)), (Belief:DeductionNP, Goal:DeductionNP, Time:Compose)
//(M --> C), (M --> X),  eventOfNeg(C,X)  |-  --(M --> conjWithout( C,--X)), (Belief:DeductionNN, Goal:DeductionNN, Time:Compose)
//
//(M --> C), (M --> X),  eventOfNeg(C,X)  |-    (M --> conjWithout( C,  X)), (Belief:DeductionNN, Goal:DeductionNN, Time:Compose)
//(M --> C), (M --> X),  eventOf(C,X)     |-    (M --> conjWithout( C,--X)), (Belief:DeductionNP, Goal:DeductionNP, Time:Compose)
//  (M --> C), (M --> X),  eventOf(C,X)     |-   --(M --> conjWithout( C,  X)), (Belief:DeductionNP, Goal:DeductionNP, Time:Compose)
//  (M --> C), (M --> X),  eventOfNeg(C,X)  |-   --(M --> conjWithout( C,--X)), (Belief:DeductionNN, Goal:DeductionNN, Time:Compose)

//subject (extensional, disj)
(C --> M), (X --> M),  eventOf(C,X)  |-    (conjWithout( C,  X) --> M), (Belief:DeductionNP, Goal:DeductionNP, Time:Compose)
(C --> M), (X --> M),  eventOfNeg(C,X)     |-    (conjWithout( C,--X) --> M), (Belief:DeductionNN, Goal:DeductionNN, Time:Compose)
//  (C --> M), (X --> M),  eventOfNeg(C,X)  |-   --(conjWithout( C,--X) --> M), (Belief:DeductionNP, Goal:DeductionNP, Time:Compose)
//  (C --> M), (X --> M),  eventOf(C,X)     |-   --(conjWithout( C,  X) --> M), (Belief:DeductionNN, Goal:DeductionNN, Time:Compose)

//(C --> M), (X --> M),  eventOfNeg(C,X)  |-  --(conjWithout( C,--X) --> M), (Belief:DeductionPP, Goal:DeductionPP, Time:Compose)
//(C --> M), (X --> M),  eventOf(C,X)     |-  --(conjWithout( C,  X) --> M), (Belief:DeductionPN, Goal:DeductionPN, Time:Compose)
//  (C --> M), (X --> M),  eventOfNeg(C,X)  |-    (conjWithout( C,--X) --> M), (Belief:DeductionPP, Goal:DeductionPP, Time:Compose)
//  (C --> M), (X --> M),  eventOf(C,X)     |-    (conjWithout( C,  X) --> M), (Belief:DeductionPN, Goal:DeductionPN, Time:Compose)


