//conjunction/disjunction structural decomposition
//   see: https://en.wikipedia.org/wiki/Imperative_logic#Ross.27_Paradox

//Y, (&&,X,A..+), neq(X,Y) |- unisubst((&&,A..+),X,Y), (Belief:Deduction, Time:TaskEvent)
// Y, (&&,--X,A..+), neq(X,Y) |- unisubst((&&,A..+), X,Y), (Belief:DeductionN, Time:TaskEvent)



    //question short-circuit answer
    C, X, task("?"), eventOf(C,X)                 |- --C,  (Belief:BeliefStructuralDeductionPN, Punctuation:Belief, Time:TaskEvent)
    C, X, task("?"), eventOfNeg(C,X), has(C,"--") |-   C,  (Belief:BeliefStructuralDeductionPP, Punctuation:Belief, Time:TaskEvent)
        //TODO other short-circuits, involving ==> etc






//Y, C, neq(Y,C), is(C,"&&"), --isVar(Y)              |- unisubst(C,chooseUnifiableSubEvent(C,Y),Y), (Belief:Deduction, Time:TaskEvent)
//Y, C, neq(Y,C), is(C,"&&"), --isVar(Y), has(C,"--") |- unisubst(C,chooseUnifiableSubEvent(C,--Y),--Y), (Belief:DeductionN, Time:TaskEvent)
//  (B ==> (&&,X,A..+)), Y, --isVar(X),--isVar(Y), hasBelief()  |- polarizeTask(unisubst((B ==> (&&,X,A..+)),X,polarizeBelief(Y)),novel), (Belief:DeductionDepolarized, Time:BeliefEvent, Time:Task)
//  ((&&,X,A..+) ==> B), Y, --isVar(X),--isVar(Y), hasBelief()  |- polarizeTask(unisubst(((&&,X,A..+) ==> B),X,polarizeBelief(Y)),novel), (Belief:DeductionDepolarized, Time:BeliefEvent, Time:Task)

      //(B ==> (&&,X,A..+)), Y, --isVar(X),--isVar(Y)  |- polarizeTask(unisubst((B ==> (&&,A..+)),X,polarizeBelief(Y))), (Belief:DeductionDepolarized, Time:BeliefEvent)
      //((&&,X,A..+) ==> B), Y, --isVar(X),--isVar(Y)  |- polarizeTask(unisubst(((&&,A..+) ==> B),X,polarizeBelief(Y))), (Belief:DeductionDepolarized, Time:BeliefEvent)



//// propositional decomposition ////////////////////////////////////////////////////////////////////////////////////
//If S is the case, and (&&,S,A..+) is not the case, it can't be that (&&,A..+) is the case


    //sub-sequence following belief or goal
    //(&/,B,A_1..n), B, task("!") |- (&/,A_1..n), (Truth:Deduction, Desire:Strong, SequenceIntervals:FromPremises)
    C, X, --isVar(X)                |-    conjAfter(C,   X),  (Belief:DeductionPP, Goal:DeductionPP, Time:TaskEvent)
    C, X, --isVar(X), has(C,"--")   |-    conjAfter(C, --X),  (Belief:DeductionPN, Goal:DeductionPN, Time:TaskEvent)

    D, X, --isVar(X), has(D,"--")   |-  --conjAfter(D, --X),  (Belief:DeductionNN, Goal:DeductionNN, Time:TaskEvent)
    D, X, --isVar(X)                |-  --conjAfter(D,   X),  (Belief:DeductionNP, Goal:DeductionNP, Time:TaskEvent)

    //sub-sequence leading to goal
    X, C                     |-  conjBefore(C,   X),  (Belief:DeductionPP, Goal:DeductionPP, Time:TaskEvent)
    X, C, has(C,"--")        |-  conjBefore(C, --X),  (Belief:DeductionNP, Goal:DeductionNP, Time:TaskEvent)
        X, C                 |-    conjAfter(C,   X),  (Belief:DeductionPP, Time:TaskEvent)
        X, C, has(C,"--")    |-    conjAfter(C, --X),  (Belief:DeductionNP, Time:TaskEvent)
    X, D                     |-  --conjBefore(D,   X),  (Belief:DeductionPN, Goal:DeductionPN, Time:TaskEvent)
    X, D, has(D,"--")        |-  --conjBefore(D, --X),  (Belief:DeductionNN, Goal:DeductionNN, Time:TaskEvent)
      X, D                     |-  --conjAfter(D,   X),  (Belief:DeductionPN, Time:TaskEvent)
      X, D, has(D,"--")        |-  --conjAfter(D, --X),  (Belief:DeductionNN, Time:TaskEvent)

      //X, C, is(C,"&&")                    |-  conjBefore(C,   X),  (Belief:DividePPX, Time:TaskEvent)
        //X, C, is(C,"&&"), has(C,"--")       |-  conjBefore(C, --X),  (Belief:DivideNPX, Time:TaskEvent) //<- PNX ?

    //TODO nal3 shortcut - decompose trailing intersection/union event


//Anonymous Deduction and Abduction
    X, (V ==> X), task("?"), isUnneg(V,"#"), --isVar(X)     |- X, (Belief:BeliefStructuralReduction, Time:TaskEvent)

        X, (X ==> V), task("?"), is(V,"#"), --isVar(X)      |- X,   (Belief:BeliefStructuralAbduction, Time:TaskEvent)
        X, (--X ==> V), task("?"), is(V,"#"), --isVar(X)    |- --X, (Belief:BeliefStructuralAbduction, Time:TaskEvent)



    //TODO test and write predicate version:
      //(C==>Y), X, --isVar(X)         |-  polarizeTask((conjAfter(C,  polarizeBelief(X)) ==> Y)),       (Belief:DeductionDepolarized)
      //(--C==>Y), X, --isVar(X)       |-  polarizeTask(--(conjAfter(C,  --polarizeBelief(X)) ==> Y)),       (Belief:DeductionDepolarized)
     // (--D==>Y), X, --isVar(X) |- polarizeTask((--unisubst(D,chooseUnifiableSubEvent(D,polarizeBelief(X)),polarizeBelief(X),"#") ==> Y)), (Belief:DeductionDepolarized, Goal:DeductionDepolarized)



//Conditional implication decomposition
//  Original:
//    (S ==> M), ((&&,S,A_1..n) ==> M) |- ((&&,A_1..n) ==> M), (Truth:DeductionNegativePositivePositive, Order:ForAllSame, SequenceIntervals:FromBelief)
//    (S ==> M), ((||,S,A_1..n) ==> M) |- ((||,A_1..n) ==> M), (Truth:DeductionPositiveNegativeNegative, Order:ForAllSame)
//    (M ==> S), (M ==> (&&,S,A_1..n)) |- (M ==> (&&,A_1..n)), (Truth:DeductionPositiveNegativeNegative, Order:ForAllSame, SequenceIntervals:FromBelief)
//    (M ==> S), (M ==> (||,S,A_1..n)) |- (M ==> (||,A_1..n)), (Truth:DeductionNegativePositivePositive, Order:ForAllSame)


//    //conj
//    ( C ==> M), (S ==> M), eventOf(C,S)                |-     (  conjWithout(C, S) ==> M), (Belief:DeductionPN, Time:Compose)
//     ( C ==> M), (S ==> M), eventOfNeg(C,S)                |-     (  conjWithout(C, --S) ==> M), (Belief:DeductionPP, Time:Compose)
//    ( C ==> M), (S ==> M), eventOf(C,S)                |-    --(  conjWithout(C, S) ==> M), (Belief:DeductionNN, Time:Compose)
//     ( C ==> M), (S ==> M), eventOfNeg(C,S)                |-    --(  conjWithout(C, --S) ==> M), (Belief:DeductionNP, Time:Compose)
//
//    //disj
//    (  --C ==> M), (S ==> M), eventOf(C,S)          |-   (  --conjWithout(C, S) ==> M), (Belief:DeductionPN, Time:Compose)
//       ( --C ==> M), (S ==> M), eventOf(C,S)        |- --(  --conjWithout(C, S) ==> M), (Belief:DeductionNN, Time:Compose)
//    (  --C ==> M), (S ==> M), eventOfNeg(C,S)          |-   (  --conjWithout(C, --S) ==> M), (Belief:DeductionPP, Time:Compose)
//       ( --C ==> M), (S ==> M), eventOfNeg(C,S)        |- --(  --conjWithout(C, --S) ==> M), (Belief:DeductionNP, Time:Compose)

//conj pred

//   //(M ==> C), (M ==> S), eventOf(C,S), --isVar(M)      |-   (M ==> conjWithout(C,   S)), (Belief:DeductionPP, Time:Compose)
//   (M ==> C), (M ==> S), eventOfNeg(C,S), --isVar(M)   |- --(M ==> conjWithout(C, --S)), (Belief:DeductionPP, Time:Compose)
//   //(M ==> C), (M ==> S), eventOfNeg(C,S), --isVar(M)   |-   (M ==> conjWithout(C, --S)), (Belief:DeductionPN, Time:Compose)
//   (M ==> C), (M ==> S), eventOf(C,S), --isVar(M)      |- --(M ==> conjWithout(C,   S)), (Belief:DeductionPN, Time:Compose)
//       //(M ==> C), (M ==> S), eventOf(C,S), --isVar(M)      |- --(M ==> conjWithout(C,   S)), (Belief:DeductionNP, Time:Compose)
//       (M ==> C), (M ==> S), eventOfNeg(C,S), --isVar(M)   |-   (M ==> conjWithout(C, --S)), (Belief:DeductionNP, Time:Compose)
//       //(M ==> C), (M ==> S), eventOfNeg(C,S), --isVar(M)   |- --(M ==> conjWithout(C, --S)), (Belief:DeductionNN, Time:Compose)
//       (M ==> C), (M ==> S), eventOf(C,S), --isVar(M)      |-   (M ==> conjWithout(C,   S)), (Belief:DeductionNN, Time:Compose)


   (M ==> C), (M ==> S), eventOf(C,S)                 |-   (M ==> conjWithout(C,   S)), (Belief:DeductionPP, Time:Compose)
     (M ==> S), (M ==> C), eventOf(C,S)                 |-   (M ==> conjWithout(C,   S)), (Belief:DeductionPP, Time:Compose)
   (M ==> C), (M ==> S), eventOfNeg(C,S)              |-   (M ==> conjWithout(C, --S)), (Belief:DeductionPN, Time:Compose)
     (M ==> S), (M ==> C), eventOfNeg(C,S)              |-   (M ==> conjWithout(C, --S)), (Belief:DeductionNP, Time:Compose)

   (M ==> D), (M ==> S), eventOfNeg(D,S)               |- --(M ==> conjWithout(D, --S)), (Belief:DeductionNP, Time:Compose)
    (M ==> S), (M ==> D), eventOfNeg(D,S)               |- --(M ==> conjWithout(D, --S)), (Belief:DeductionNN, Time:Compose)
   (M ==> D), (M ==> S), eventOf(D,S)                  |- --(M ==> conjWithout(D,   S)), (Belief:DeductionNN, Time:Compose)
    (M ==> S), (M ==> D), eventOf(D,S)                  |- --(M ==> conjWithout(D,   S)), (Belief:DeductionPN, Time:Compose)




    //implication short-circuit doubt TODO
//    (--C==>Y), X, eventOf(C,X)    |- --(Y && C), (Belief:IntersectionPN)
//    (Y==>C), X, eventOf(C,X)    |- --(Y && C), (Belief:IntersectionPN)
//    (Y==>C), X, eventOfNeg(C,X) |-   (Y==>C), (Belief:IntersectionPP)

