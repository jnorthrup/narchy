//Higher-Order Logic Bridge  <a ==> c> <b ==> c>. |- <a <-> b>. %F_cmp%

//impl/sim
  (X ==> Z), (Y ==> Z), neqRCom(X,Y) |- (X <-> Y), (Belief:ComparisonSymmetric)
    (X ==> Z), (Y ==> Z), neq(X,Y) |- ((X,polarizeTask(Z)) <-> (Y,polarizeBelief(Z))), (Belief:ComparisonSymmetricDepolarized)

  (Z ==> X), (Z ==> Y),   neqRCom(X,Y) |-   (polarizeTask(X) <-> polarizeBelief(Y)), (Belief:ComparisonSymmetricDepolarized)
  //(Z ==> X), (--Z ==> Y), neqRCom(X,Y) |- --(polarize(X,task) <-> polarize(Y,belief)), (Belief:ComparisonSymmetricDepolarized, Time:Intersect)

//sim/impl = impl/sim in reverse
//  (X <-> Y),   Y, task(".") |- (X ==> Y), (Punctuation:Question)
//  (X <-> --Y), Y, task(".") |- (X ==> Y), (Punctuation:Question)

//distinction - an attempt to elucidate the difference between similar/dissimilar concepts
  (X <-> Y),   Y |- ((X && ?1) <-> (Y && ?2)), (Punctuation:Ask)

    (X <-> --Y),   Y |- ((X && ?1) <-> (--Y && ?2)), (Punctuation:Ask)

