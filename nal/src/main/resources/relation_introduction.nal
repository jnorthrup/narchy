//Relation introduction
   (A --> C), (B --> D), neq(A,B), neq(C,D) |- ((A,B) --> (C,D)), (Belief:Intersection)
   (A --> C), (A --> D), neq(C,D)           |- ((A,A) --> {C,D}), (Belief:Intersection)
   (C --> A), (D --> A), neq(C,D)           |- ({C,D} --> (A,A)), (Belief:Intersection)

   //          #_#R[(A --> C) (B --> D) |- ((* A B) --> (* C D)) :post (:t/intersection)] //            ;this one cant be allowed due to control reasons:
   //          #R[(A --> C) (A --> D) |- ((* A A) --> (* C D)) :post (:t/intersection)]
   //         #R[(A --> C) (B --> C) |- ((* A B) --> (* C C)) :post (:t/intersection)]
   //         #R[({A} --> C) (A --> D) |- ((* {A} A) --> (* C D)) :post (:t/intersection)]
   //          #R[(A --> C) ({A} --> D) |- ((* A {A}) --> (* C D)) :post (:t/intersection)]
   //         #R[(A --> [C]) (B --> C) |- ((* A B) --> (* [C] C)) :post (:t/intersection)]
   //         #R[(A --> C) (B --> [C]) |- ((* A B) --> (* C [C])) :post (:t/intersection)]

//TODO make a conj factoring predicate to reduce this to single rule
   ((A-->X) && (B-->X)), X        |-       (    polarize((  (A-->X) &&   (B-->X)), task)-->X), (Belief:StructuralDeductionDepolarized)
     (  (A-->X) && --(B-->X)), X        |- (    polarize((  (A-->X) && --(B-->X)), task)-->X), (Belief:StructuralDeductionDepolarized)
     (--(A-->X) && --(B-->X)), X        |- (    polarize((--(A-->X) && --(B-->X)), task)-->X), (Belief:StructuralDeductionDepolarized)
   ((X-->A) && (X-->B)), X              |- (X-->polarize((  (X-->A) &&   (X-->B)), task)),     (Belief:StructuralDeductionDepolarized)
     (  (X-->A) && --(X-->B)), X        |- (X-->polarize((  (X-->A) && --(X-->B)), task)),     (Belief:StructuralDeductionDepolarized)
     (--(X-->A) && --(X-->B)), X        |- (X-->polarize((--(X-->A) && --(X-->B)), task)),     (Belief:StructuralDeductionDepolarized)
   ((A<->X) && (B<->X)), X              |- (polarize((  (A<->X) &&   (B<->X)), task)<->X), (Belief:StructuralDeductionDepolarized)
     (  (A<->X) && --(B<->X)), X        |- (polarize((  (A<->X) && --(B<->X)), task)<->X), (Belief:StructuralDeductionDepolarized)
     (--(A<->X) && --(B<->X)), X        |- (polarize((--(A<->X) && --(B<->X)), task)<->X), (Belief:StructuralDeductionDepolarized)
   ((X-->A) && (B-->X)), X              |- (polarize((  (X-->A) &&   (B-->X)), task)<->X), (Belief:StructuralDeductionDepolarized)
     (  (X-->A) && --(B-->X)), X        |- (polarize((  (X-->A) && --(B-->X)), task)<->X), (Belief:StructuralDeductionDepolarized)
     (--(X-->A) &&   (B-->X)), X        |- (polarize((--(X-->A) &&   (B-->X)), task)<->X), (Belief:StructuralDeductionDepolarized)
     (--(X-->A) && --(B-->X)), X        |- (polarize((--(X-->A) && --(B-->X)), task)<->X), (Belief:StructuralDeductionDepolarized)


//NAL Specification Table 11.9 - Product Equivalences
//TODO n-ary
((A,B)-->(X,Y)), ((A,B)-->(X,Y))            |- ((A --> X) && (B --> Y)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
 ((A,B)-->(X,Y)), ((A,B)-->(X,Y))            |- (--(A --> X) && --(B --> Y)), (Belief:StructuralDeductionN, Goal:StructuralDeductionN)
((A,B)<->(X,Y)), ((A,B)<->(X,Y))            |- ((A <-> X) && (B <-> Y)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
 ((A,B)<->(X,Y)), ((A,B)<->(X,Y))            |- (--(A <-> X) && --(B <-> Y)), (Belief:StructuralDeductionN, Goal:StructuralDeductionN)

 ((A,B,C)-->(X,Y,Z)), ((A,B,C)-->(X,Y,Z))    |- (&&, (A --> X), (B --> Y), (C --> Z)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
  ((A,B,C)-->(X,Y,Z)), ((A,B,C)-->(X,Y,Z))    |- (&&, --(A --> X), --(B --> Y), --(C --> Z)), (Belief:StructuralDeductionN, Goal:StructuralDeductionN)
 ((A,B,C)<->(X,Y,Z)), ((A,B,C)<->(X,Y,Z))    |- (&&, (A <-> X), (B <-> Y), (C <-> Z)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
  ((A,B,C)<->(X,Y,Z)), ((A,B,C)<->(X,Y,Z))    |- (&&, --(A <-> X), --(B <-> Y), --(C <-> Z)), (Belief:StructuralDeductionN, Goal:StructuralDeductionN)